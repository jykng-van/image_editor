{"ast":null,"code":"/* import axios from \"axios\";\r\nimport {} from \"./validation\"; */\nexport default class ImageEditor {\n  constructor(canvas) {\n    this.image_types = ['image/jpeg', 'image/png', 'image/webp', 'image/gif', 'image/bmp'];\n    //possible max width 2056\n    console.log('ImageEditor constructor!');\n    this.canvas = canvas;\n    console.log(canvas);\n    this.ctx = this.canvas.getContext('2d');\n    this.img = new Image();\n    this.img.crossOrigin = 'Anonymous';\n\n    /* this.rotate_angle = 90;\r\n      //set image requirements\r\n    this.minwidth = 514;\r\n    this.minheight = 20;\r\n    this.max_mb = 10;\r\n    //this.max_filesize = this.max_mb * 1024 * 1024;\r\n    let requirements = document.querySelector('#image-requirements');\r\n    let tip = requirements.dataset.tip;\r\n    requirements.dataset.tip = tip.replace('{MINWIDTH}', this.minwidth).replace('{MINHEIGHT}', this.minheight).replace('{MAXMB}', this.max_mb);\r\n    \r\n        //this.img.src = file;\r\n        //init state\r\n    this.state;\r\n    this.action_group.querySelectorAll('.view, .crop, .rotate').forEach(b=>b.addEventListener('click', e=>this.set_state(e.target.dataset.state)));\r\n      //mouse actions on canvas\r\n    this.start_x, this.start_y;\r\n    this.mouse_engaged = false;\r\n    this.crop = {x:null, y:null, width:null, height:null, start_x:null, start_y:null};\r\n    this.crop_state;\r\n    this.handle_radius = 4;\r\n    this.canvas.addEventListener('mousedown',this.mouse_down.bind(this));\r\n    window.addEventListener('mouseup',this.mouse_up.bind(this));\r\n    this.canvas.addEventListener('mousemove',this.mouse_move.bind(this));\r\n      //zoom buttons\r\n    this.zoom = 1.0;\r\n    this.zoom_in_button.addEventListener('click', this.zoom_in.bind(this));\r\n    this.zoom_out_button.addEventListener('click', this.zoom_out.bind(this));\r\n      //rotate buttons\r\n    this.rotate_actions.querySelectorAll('.counter-clockwise, .clockwise').forEach(b=>{\r\n        b.addEventListener('click', e=>{\r\n            let deg = e.target.dataset.rotate * this.rotate_angle;\r\n            this.rotate_image(deg);\r\n        });\r\n    });\r\n        //replace image\r\n    this.file_input.nextElementSibling.addEventListener('click', ()=>{\r\n        //clears file_input for Chrome\r\n        console.log('file_input clear');\r\n        this.file_input.value=null;\r\n    });\r\n    this.file_input.addEventListener('change', this.replace_image.bind(this));\r\n    //save image\r\n    this.save_button.addEventListener('click', this.save_image.bind(this));\r\n    //cancel button\r\n    if (this.cancel_button) this.cancel_button.addEventListener('click', this.clear_changes.bind(this));\r\n    //trash button\r\n    this.trash_button.addEventListener('click', this.remove_image.bind(this));\r\n      window.addEventListener('resize', ()=>{\r\n        if (this.dialog.open){\r\n            this.canvas.removeAttribute('width');\r\n            this.canvas.removeAttribute('height');\r\n            this.load_image(null, true);\r\n        }\r\n    });\r\n      console.log(this.canvas.width, this.canvas.height);\r\n    this.current_image = {\r\n        x:null, y:null,\r\n        width:null, height:null,\r\n        start_x:null, start_y:null\r\n    };\r\n    this.img.addEventListener('load', this.load_image.bind(this)); */\n  }\n  /* load_s3_file(file){\r\n      console.log('load_s3_file', file);\r\n      axios(file+'?_='+(new Date().getTime()),{\r\n          method:'get',\r\n          responseType:'blob',\r\n          headers: {\r\n            'Access-Control-Allow-Origin':'*',\r\n          }\r\n        }).then(result=>{\r\n          console.log(result);\r\n          this.dialog.showModal();\r\n          var reader = new FileReader();\r\n          reader.onloadend= () =>{\r\n              console.log('onloadend');\r\n              this.img.src = reader.result;\r\n          }\r\n          reader.readAsDataURL(result.data);\r\n        });\r\n  } */\n  load_image(e, keep_crop) {\n    /* console.log('load_image');\r\n    console.log(devicePixelRatio);\r\n    try{\r\n        this.canvas.width = this.canvas.offsetWidth;\r\n        this.canvas.height = this.canvas.offsetHeight;\r\n          let cwidth = this.canvas.width;\r\n        let cheight = this.canvas.height;\r\n          let iwidth = this.img.width;\r\n        let iheight = this.img.height;\r\n          let is_wide = iwidth > iheight;\r\n        if ((is_wide && (iwidth < this.minwidth || iheight < this.minheight)) || (!is_wide && (iheight < this.minwidth || iwidth < this.minheight))){\r\n            throw new Error(\"Image doesn't meet minimum size\");\r\n        }\r\n        if (!is_wide && iwidth < this.minwidth){ //rotate automatically\r\n            this.rotate_image(90);\r\n            iwidth = this.img.width;\r\n            iheight = this.img.height;\r\n            is_wide = iwidth > iheight;\r\n        }\r\n          console.log(iwidth, iheight);\r\n          if (iheight < this.minwidth){\r\n            this.set_rotate_angles(180);\r\n        }else{\r\n            this.set_rotate_angles(90);\r\n        }\r\n          console.log('keep_crop', keep_crop);\r\n        if (!keep_crop){\r\n            this.crop = {\r\n                x:0, y:is_wide ? 0 : iheight/2 - iwidth/2,\r\n                width:iwidth, height:is_wide ? iheight : iwidth,\r\n                start_x:null, start_y:null\r\n            };\r\n        }\r\n          this.width_ratio = iwidth / cwidth;\r\n        this.height_ratio = iheight / cheight;\r\n          console.log('cwidth', cwidth, 'cheight', cheight, 'width_ratio', this.width_ratio, 'height_ratio', this.height_ratio,\r\n        'iwidth/width_ratio', iwidth/this.width_ratio, 'iheight/width_ratio',iheight/this.width_ratio,\r\n        'iwidth/height_ratio', iwidth/this.height_ratio, 'iheight/height_ratio', iheight/this.height_ratio);\r\n        if (iwidth > cwidth || iheight > cheight){\r\n            if (iwidth/this.height_ratio > cwidth){//fit wide because the height is larger than the canvas\r\n                this.ratio = this.width_ratio;\r\n            }else{//fit high\r\n                this.ratio = this.height_ratio;\r\n            }\r\n              this.zoom = 1/this.ratio;\r\n        }else{\r\n            this.zoom = 1.0;\r\n              this.ratio = this.width_ratio;\r\n        }\r\n        console.log(this.width_ratio, this.height_ratio, this.ratio);\r\n        console.log('zoom', this.zoom);\r\n          let current = this.current_image;\r\n        current.width = iwidth * this.zoom;\r\n        current.height = iheight * this.zoom;\r\n          current.x = (cwidth - current.width)/2;\r\n        current.y = (cheight - current.height)/2;\r\n          console.log(current);\r\n        if (!this.state){\r\n            this.state = 'view';\r\n            this.set_view_mode();\r\n        }\r\n        this.set_state(this.state);\r\n    }catch(ex){\r\n        create_dialog_basic(ex.message);\r\n    } */\n  }\n  draw_image() {\n    /* console.log('draw_image');\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); //clear image\r\n      let current;\r\n    let src = {};\r\n    if (this.state=='view'){\r\n        src = (({x,y,width,height})=>({x,y,width,height}))(this.crop);\r\n        console.log(this.current_image);\r\n        current = {\r\n            x:this.current_image.x+this.crop.x*this.zoom,\r\n            y:this.current_image.y+this.crop.y*this.zoom,\r\n            width:this.crop.width*this.zoom,\r\n            height:this.crop.height*this.zoom\r\n        };\r\n        console.log(current, this.zoom);\r\n    }else{\r\n        src = {x:0,y:0, width:this.img.width, height:this.img.height};\r\n        current = this.current_image;\r\n    }\r\n    console.log(src.x, src.y, src.width, src.height, //get all of source images\r\n    current.x, current.y,\r\n    current.width, current.height);\r\n    this.ctx.drawImage(this.img,\r\n        src.x, src.y, src.width, src.height, //get all of source images\r\n        current.x, current.y,\r\n        current.width, current.height); */\n  }\n  set_state(state) {\n    /* console.log(state);\r\n    this.action_group.querySelectorAll('button').forEach(b=>b.classList.remove('selected'));\r\n    this.action_group.querySelector(`.${state}`).classList.add('selected');\r\n    this.state = state;\r\n    let states = ['view','crop','rotate'];\r\n    states.forEach(s=>{\r\n        if (s==state) this.canvas.classList.add(s);\r\n        else this.canvas.classList.remove(s);\r\n    });\r\n      if(state=='view'){\r\n        this.set_view_mode();\r\n    }else if (state=='crop'){\r\n        this.set_crop_mode();\r\n    }else if (state=='rotate'){\r\n        this.set_rotate_mode();\r\n    } */\n  }\n  set_view_mode() {\n    /* this.canvas.style.cursor = 'move';\r\n    this.hide_rotate_actions();\r\n    this.draw_image(); */\n  }\n  set_crop_mode() {\n    /* this.canvas.style.cursor = 'default';\r\n    this.hide_rotate_actions();\r\n    this.draw_image();\r\n    this.draw_cropper(); */\n  }\n  set_rotate_mode() {\n    /* this.show_rotate_actions();\r\n    this.canvas.style.cursor = 'default';\r\n    this.draw_image(); */\n  }\n  mouse_down(e) {\n    /* this.mouse_engaged  = true;\r\n    this.start_x = e.offsetX;\r\n    this.start_y = e.offsetY;\r\n    if (this.state=='view'){\r\n        console.log(this.current);\r\n        this.current_image.start_x = this.current_image.x;\r\n        this.current_image.start_y = this.current_image.y;\r\n    }else if (this.state=='crop'){\r\n        this.crop.start_x = this.cropbox.x;\r\n        this.crop.start_y = this.cropbox.y;\r\n        if (this.crop_state=='default'){\r\n            this.current_image.start_x = this.current_image.x;\r\n            this.current_image.start_y = this.current_image.y;\r\n        }\r\n        console.log(this.crop);\r\n    } */\n  }\n  mouse_up() {\n    /* this.mouse_engaged = false; */\n  }\n  mouse_move(e) {\n    /* let current_x = e.offsetX;\r\n    let current_y = e.offsetY;\r\n    let change_x = current_x - this.start_x;\r\n    let change_y = current_y - this.start_y;\r\n    let current = this.current_image;\r\n    if (this.mouse_engaged){\r\n        console.log(change_x, change_y);\r\n          if(this.state=='view'){ //move image\r\n            //bounds check\r\n            let x_pos = current.start_x+change_x;\r\n            let y_pos = current.start_y+change_y;\r\n              current.x = this.check_x_bounds(x_pos);\r\n            current.y = this.check_y_bounds(y_pos);\r\n            this.draw_image();\r\n        }else if (this.state=='crop'){\r\n            let x_pos = this.cropbox.x, y_pos = this.cropbox.y;\r\n            let crop_width = this.cropbox.width;\r\n            let crop_height = this.cropbox.height;\r\n            console.log(this.cropbox);\r\n            let cropright = this.cropbox.x+this.cropbox.width;\r\n            let cropbottom = this.cropbox.y+this.cropbox.height;\r\n              let left_resize = ()=>{\r\n                if (current_x < current.x) x_pos=current.x; //don't grow beyond left edge\r\n                else if (current_x > cropright - this.minwidth/this.ratio) x_pos=cropright-this.minwidth/this.ratio; //don't shrink smaller than minimum\r\n                else if (current_x > cropright-crop_height) x_pos=cropright-crop_height; //don't shrink width more than height\r\n                else x_pos = current_x;\r\n                  crop_width = cropright - x_pos;\r\n            };\r\n            let right_resize = ()=>{\r\n                if (current_x < current.x+current.width  //don't grow beyond the right edge\r\n                && current_x > this.cropbox.x + this.minwidth/this.ratio //don't shrink smaller than the minimum\r\n                && current_x > current.x+crop_height) //don't shrink beyond width more than height\r\n                    crop_width = current_x - this.cropbox.x;\r\n            };\r\n            let top_resize = ()=>{\r\n                if (current_y < current.y) y_pos=current.y; //don't grow beyond the top edge\r\n                else if (current_y > cropbottom - this.minheight/this.ratio) y_pos=cropbottom-this.minheight/this.ratio; //don't shrink smaller than minimum\r\n                else if (current_y < cropbottom-crop_width) y_pos=cropbottom-crop_width; //don't grow beyond width\r\n                else y_pos = current_y;\r\n                  crop_height = cropbottom - y_pos;\r\n            }\r\n            let bottom_resize = ()=>{\r\n                if (current_y < current.y+current.height //don't grow beyond the bottom edge\r\n                && current_y > this.cropbox.y + this.minheight/this.ratio //don't shrink smaller than the minimum\r\n                && current_y < this.cropbox.y+crop_width) //don't grow beyond the width\r\n                    crop_height = current_y - this.cropbox.y;\r\n            }\r\n            switch(this.crop_state){\r\n                case 'nw-resize':\r\n                    top_resize();\r\n                    left_resize();\r\n                    break;\r\n                case 'ne-resize':\r\n                    top_resize();\r\n                    right_resize();\r\n                    break;\r\n                case 'sw-resize':\r\n                    bottom_resize();\r\n                    left_resize();\r\n                    break;\r\n                case 'se-resize':\r\n                    bottom_resize();\r\n                    right_resize();\r\n                    break;\r\n                case 'w-resize':\r\n                    left_resize();\r\n                    break;\r\n                case 'e-resize':\r\n                    right_resize();\r\n                    break;\r\n                case 'n-resize':\r\n                    top_resize();\r\n                    break;\r\n                case 's-resize':\r\n                    bottom_resize();\r\n                    break;\r\n                case 'move':\r\n                    x_pos = this.crop.start_x+change_x;\r\n                    y_pos = this.crop.start_y+change_y;\r\n                      if (x_pos < current.x){ //leftside\r\n                        x_pos = current.x;\r\n                    }else if (x_pos + crop_width > current.x + current.width){//rightside\r\n                        x_pos = current.x + current.width - crop_width;\r\n                    }\r\n                    if (y_pos < current.y){ //topside\r\n                        y_pos = current.y;\r\n                    }else if (y_pos + crop_height > current.y + current.height){//bottomside\r\n                        y_pos = current.y + current.height - crop_height;\r\n                    }\r\n                    break;\r\n                default:\r\n                      current.x = this.check_x_bounds(current.start_x+change_x);\r\n                    current.y = this.check_y_bounds(current.start_y+change_y);\r\n                    x_pos = current.x + this.crop.x*this.zoom;\r\n                    y_pos = current.y + this.crop.y*this.zoom;\r\n            }\r\n              //console.log(this.crop_state, x_pos, current.x, cropright);\r\n            //cropbox.x = current.x  + this.crop.x*this.zoom,\r\n            //cropbox.x - current.x = this.crop.x*this.zoom\r\n            //(cropbox.x - current.x) / this.zoom = this.crop.x\r\n            this.crop.x = (x_pos - current.x)/this.zoom;\r\n            this.crop.y = (y_pos - current.y)/this.zoom;\r\n            this.crop.width = crop_width/this.zoom;\r\n            this.crop.height = crop_height/this.zoom;\r\n            console.log(this.crop);\r\n            this.draw_image();\r\n            this.draw_cropper();\r\n        }\r\n    }else{\r\n        let cropbox = this.cropbox;\r\n        let rightedge = cropbox.x + cropbox.width;\r\n        let bottomedge = cropbox.y + cropbox.height;\r\n        if (this.state=='crop'){\r\n            if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n            current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius){ //upper left\r\n                this.crop_state = 'nw-resize';\r\n            }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n            current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius){ //upper right\r\n                this.crop_state = 'ne-resize';\r\n            }else if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n            current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius){ //lower left\r\n                this.crop_state = 'sw-resize';\r\n            }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n            current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius){ //lower right\r\n                this.crop_state = 'se-resize';\r\n            }else if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n            current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //left edge\r\n                this.crop_state = 'w-resize';\r\n            }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n            current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //right edge\r\n                this.crop_state = 'e-resize';\r\n            }else if (current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius &&\r\n            current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius){ //top edge\r\n                this.crop_state = 'n-resize';\r\n            }else if (current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius &&\r\n            current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius){ //top edge\r\n                this.crop_state = 's-resize';\r\n            }else if (current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius &&\r\n            current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //inside\r\n                this.crop_state = 'move';\r\n            } else{ //outside\r\n                this.crop_state = 'default';\r\n            }\r\n            this.canvas.style.cursor = this.crop_state;\r\n          }\r\n    } */\n  }\n  check_x_bounds(x_pos) {\n    /* let current = this.current_image;\r\n    if (current.width <= this.canvas.width){ //image is smaller than canvas\r\n        if (x_pos < 0){ //leftside\r\n            x_pos = 0;\r\n        }else if (x_pos + current.width > this.canvas.width){//rightside\r\n            x_pos = this.canvas.width - current.width;\r\n        }\r\n    }else{ //image is larger than canvas\r\n        if (x_pos + current.width < this.canvas.width){\r\n            x_pos = this.canvas.width - current.width; //leftside\r\n        }else if (x_pos > 0){\r\n            x_pos = 0; //rightside\r\n        }\r\n    }\r\n    return x_pos; */\n  }\n  check_y_bounds(y_pos) {\n    /* let current = this.current_image;\r\n    if (current.height <= this.canvas.height){ //image is smaller than canvas\r\n        if (y_pos < 0){ //topside\r\n            y_pos = 0;\r\n        }else if (y_pos + current.height > this.canvas.height){//bottomside\r\n            y_pos = this.canvas.height - current.height;\r\n        }\r\n    }else{ //image is larger than canvas\r\n        if (y_pos + current.height < this.canvas.height){\r\n            y_pos = this.canvas.height - current.height; //topside\r\n        }else if (y_pos > 0){\r\n            y_pos = 0; //bottomside\r\n        }\r\n    }\r\n    return y_pos; */\n  }\n  zoom_in() {\n    /* let current = this.current_image;\r\n    this.scale(2.0); */\n  }\n  zoom_out() {\n    /* let current = this.current_image;\r\n    this.scale(.5); */\n  }\n  scale(scale) {\n    /* //let scale = (this.zoom+zoom_change)/this.zoom;\r\n    let current = this.current_image;\r\n    let center_x = this.canvas.width / 2;\r\n    let center_y = this.canvas.height / 2;\r\n      let x_diff = current.x - center_x;\r\n    let y_diff = current.y - center_y;\r\n      //adjust width\r\n    current.width = current.width * scale;\r\n    current.height = current.height * scale;\r\n      //adjust x and y which gets shifted\r\n    let x_pos = center_x + x_diff * scale;\r\n    let y_pos = center_y + y_diff * scale;\r\n        current.x = this.check_x_bounds(x_pos);\r\n    current.y = this.check_y_bounds(y_pos);\r\n    console.log(scale, x_diff, y_diff, current.x, current.y);\r\n    this.ratio = this.width_ratio = this.img.width / current.width;\r\n    this.height_ratio = this.img.height / current.height;\r\n      this.zoom = this.zoom*scale;\r\n    console.log('zoom', this.zoom);\r\n    this.draw_image();\r\n    if (this.state=='crop'){\r\n        this.draw_cropper();\r\n    } */\n  }\n  draw_cropper() {\n    /* let ctx = this.ctx;\r\n    let cropbox = this.cropbox;\r\n      console.log(cropbox);\r\n        ctx.lineWidth = 1;\r\n    ctx.strokeStyle = '#0095DA88';\r\n    ctx.fillStyle = '#0095DA88';\r\n        //main rectangle\r\n    ctx.beginPath();\r\n    ctx.rect(cropbox.x, cropbox.y, cropbox.width, cropbox.height);\r\n    let width3rd = cropbox.width*.33;\r\n    ctx.moveTo(cropbox.x + width3rd, cropbox.y);\r\n    ctx.lineTo(cropbox.x + width3rd, cropbox.y+cropbox.height);\r\n    ctx.moveTo(cropbox.x + width3rd*2, cropbox.y);\r\n    ctx.lineTo(cropbox.x + width3rd*2, cropbox.y+cropbox.height);\r\n    let height3rd = cropbox.height*.33;\r\n    ctx.moveTo(cropbox.x, cropbox.y + height3rd);\r\n    ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd);\r\n    ctx.moveTo(cropbox.x, cropbox.y + height3rd*2);\r\n    ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd*2);\r\n    ctx.stroke();\r\n    ctx.closePath;\r\n      //corner circles\r\n    let positions = [{x:cropbox.x, y:cropbox.y},{x:cropbox.x+cropbox.width, y:cropbox.y},\r\n        {x:cropbox.x, y:cropbox.y+cropbox.height},{x:cropbox.x+cropbox.width, y:cropbox.y+cropbox.height}];\r\n    positions.forEach(p=>{\r\n        ctx.beginPath();\r\n        ctx.arc(p.x, p.y, this.handle_radius, 0, 2 * Math.PI, false);\r\n        ctx.fill();\r\n        ctx.closePath();\r\n    }); */\n  }\n  hide_rotate_actions() {\n    /* if (this.rotate_actions.style.opacity != 0){\r\n        this.rotate_actions.style.opacity = 0;\r\n        this.rotate_actions.addEventListener('transitionend',()=>{this.rotate_actions.style.display='none';console.log('display none')}, {once:true});\r\n    } */\n  }\n  show_rotate_actions() {\n    /* console.log('display flex');\r\n    this.rotate_actions.style.display = 'flex';\r\n    this.rotate_actions.style.opacity = 1; */\n  }\n  set_rotate_angles(deg) {\n    /* this.rotate_angle = Math.abs(deg);\r\n    let counterclockwise = this.rotate_actions.querySelector('.counter-clockwise');\r\n    let clockwise = this.rotate_actions.querySelector('.clockwise');\r\n      counterclockwise.innerText = '-'+this.rotate_angle;\r\n    clockwise.innerText = '+'+this.rotate_angle; */\n  }\n  rotate_image(deg) {\n    /* //let deg = e.target.dataset.rotate;\r\n    let img = this.img;\r\n    let angle = deg*Math.PI/180;\r\n    console.log('angle',angle);\r\n        let ncanvas = document.createElement('canvas');\r\n      ncanvas.width = parseInt(Math.abs(img.width * Math.cos(angle)) + Math.abs(img.height * Math.sin(angle))); //img.width;\r\n    ncanvas.height = parseInt(Math.abs(img.width * Math.sin(angle)) + Math.abs(img.height * Math.cos(angle))); //img.height;\r\n      console.log(ncanvas.width, ncanvas.height);\r\n      let ctx = ncanvas.getContext('2d');\r\n    //let wh_ratio = img.width/img.height;\r\n      ctx.translate(ncanvas.width/2, ncanvas.height/2);\r\n    ctx.rotate(angle);\r\n    ctx.translate(-ncanvas.width/2, -ncanvas.height/2);\r\n    ctx.drawImage(img, 0,0,\r\n        img.width,img.height,\r\n        (ncanvas.width-img.width)/2, -(ncanvas.width-img.width)/2,\r\n        img.width, img.height);\r\n    console.log((ncanvas.width-img.width)/2, -(ncanvas.width-img.width)/2,\r\n    img.width, img.height);\r\n    let img_url = ncanvas.toDataURL(\"image/png\");\r\n    this.img.src = img_url; */\n  }\n  replace_image(e) {\n    /* console.log('replace_image', e.target.files);\r\n    const file = e.target.files[0];\r\n    console.log(file);\r\n    if (file && this.image_types.includes(file.type) && file.size < this.max_filesize){\r\n        const reader = new FileReader();\r\n        if (!this.dialog.open){\r\n            this.dialog.showModal();\r\n        }\r\n          reader.addEventListener(\"load\", () => {\r\n            // convert image file to base64 string\r\n            this.img.src = reader.result;\r\n          }, false);\r\n        if (file) {\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }else if(file && this.max_filesize){\r\n        this.file_too_big();\r\n    }else if(file){\r\n        this.invalid_file();\r\n    }else{\r\n        window.create_dialog_basic('No file found');\r\n    } */\n  }\n  open_editor() {\n    /* console.log('open_editor');\r\n    this.dialog.showModal(); */\n  }\n  drop_image(file) {\n    /* console.log('drop image', file);\r\n    const reader = new FileReader();\r\n    this.dialog.showModal();\r\n    reader.addEventListener(\"load\", () => {\r\n        // convert image file to base64 string\r\n        this.img.src = reader.result;\r\n      }, false);\r\n    reader.readAsDataURL(file); */\n  }\n  save_image() {\n    /* //create new canvas\r\n    let ncanvas = document.createElement('canvas');\r\n    let crop = this.crop;\r\n    ncanvas.width = crop.width;\r\n    ncanvas.height = crop.height;\r\n    let ctx = ncanvas.getContext('2d');\r\n    ctx.drawImage(this.img, crop.x, crop.y, crop.width, crop.height, 0, 0, ncanvas.width, ncanvas.height);\r\n    let img_url = ncanvas.toDataURL(\"image/png\");\r\n    this.wire_image.src = img_url;\r\n    this.wire_image.style.display = 'block';\r\n    this.image_selector.style.display = 'none';\r\n    this.edit_image_button.disabled = false;\r\n    this.filename_field.value = img_url;\r\n    this.dialog.close(); */\n  }\n  clear_changes() {\n    /* console.log('clear_changes');\r\n      this.img.src = '';\r\n      this.current_image = {\r\n        x:null, y:null,\r\n        width:null, height:null,\r\n        start_x:null, start_y:null\r\n    };\r\n      this.dialog.close(); */\n  }\n  remove_image() {\n    /* this.filename_field.value = '';\r\n    this.wire_image.src = '';\r\n    this.wire_image.style.display = 'none';\r\n    this.image_selector.style.display = 'flex';\r\n    this.edit_image_button.disabled = true;\r\n    let event = new InputEvent('change');\r\n    this.filename_field.dispatchEvent(event);\r\n    this.dialog.close(); */\n  }\n  initiate_edit_image(e) {\n    /* let filename = document.querySelector('#wire-imageFilename').value;\r\n    let file;\r\n    console.log('INITIATE EDIT IMAGE', filename, this.image_data);\r\n    if (filename){\r\n        if (!this.image_data || this.image_data==location.href){\r\n            console.log('load_s3_file');\r\n            file = e.target.dataset.path + filename;\r\n            this.load_s3_file(file);\r\n        }else{\r\n            console.log('open_editor');\r\n            this.open_editor();\r\n        }\r\n      } */\n  }\n  invalid_file() {\n    /* window.create_dialog_basic('Only JPEGs, PNGs, GIFs, BMPs, or WebP allowed'); */\n  }\n  file_too_big() {\n    /* window.create_dialog_basic(`Filesize must be less than ${this.max_mb}MB`); */\n  }\n\n  /* get dialog(){return document.querySelector('#image-editor')}\r\n  get toolbar(){return this.dialog.querySelector('.toolbar')}\r\n  get action_group(){return this.dialog.querySelector('.actions')}\r\n  get zoom_in_button(){return this.dialog.querySelector('.zoom-in')}\r\n  get zoom_out_button(){return this.dialog.querySelector('.zoom-out')}\r\n  get rotate_actions(){return this.dialog.querySelector('.rotate-actions')}\r\n  get file_input(){return document.querySelector('#image-file')}\r\n  get save_button(){return this.dialog.querySelector('.buttons .save')}\r\n  get cancel_button(){return this.dialog.querySelector('.buttons .cancel')}\r\n  get trash_button(){return this.dialog.querySelector('.trash')}\r\n  get cropbox(){\r\n      let current = this.current_image;\r\n      return {\r\n          x: current.x + this.crop.x*this.zoom,\r\n          y: current.y + this.crop.y*this.zoom,\r\n          width: this.crop.width*this.zoom,\r\n          height: this.crop.height*this.zoom\r\n      };\r\n  }\r\n  get image_data(){return this.img.src}\r\n  get wire_image(){return document.querySelector('#wire-image-preview')}\r\n  get edit_image_button(){return document.querySelector('#edit-image')}\r\n  get filename_field(){return document.querySelector('#wire-imageFilename')}\r\n  get image_selector(){return document.querySelector('#image-selector')}\r\n  get edit_image_button(){return document.querySelector('#edit-image')}\r\n  get image_select(){return document.querySelector('#image-selector')} */\n}","map":{"version":3,"names":["ImageEditor","constructor","canvas","image_types","console","log","ctx","getContext","img","Image","crossOrigin","load_image","e","keep_crop","draw_image","set_state","state","set_view_mode","set_crop_mode","set_rotate_mode","mouse_down","mouse_up","mouse_move","check_x_bounds","x_pos","check_y_bounds","y_pos","zoom_in","zoom_out","scale","draw_cropper","hide_rotate_actions","show_rotate_actions","set_rotate_angles","deg","rotate_image","replace_image","open_editor","drop_image","file","save_image","clear_changes","remove_image","initiate_edit_image","invalid_file","file_too_big"],"sources":["C:/Users/Jason/projects/project_showcase/image_editor/src/ImageEditor.js"],"sourcesContent":["/* import axios from \"axios\";\r\nimport {} from \"./validation\"; */\r\nexport default class ImageEditor{\r\n    canvas;\r\n    ratio;\r\n    width_ratio;\r\n    height_ratio;\r\n    ctx;\r\n    img;\r\n    minwidth;\r\n    minheight;\r\n\r\n    image_types = ['image/jpeg','image/png','image/webp','image/gif','image/bmp'];\r\n\r\n    constructor(canvas){\r\n        //possible max width 2056\r\n        console.log('ImageEditor constructor!');\r\n\r\n        this.canvas = canvas;\r\n        console.log(canvas);\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.img = new Image();\r\n        this.img.crossOrigin = 'Anonymous';\r\n\r\n\r\n        /* this.rotate_angle = 90;\r\n\r\n        //set image requirements\r\n        this.minwidth = 514;\r\n        this.minheight = 20;\r\n        this.max_mb = 10;\r\n        //this.max_filesize = this.max_mb * 1024 * 1024;\r\n        let requirements = document.querySelector('#image-requirements');\r\n        let tip = requirements.dataset.tip;\r\n        requirements.dataset.tip = tip.replace('{MINWIDTH}', this.minwidth).replace('{MINHEIGHT}', this.minheight).replace('{MAXMB}', this.max_mb);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        //this.img.src = file;\r\n\r\n\r\n        //init state\r\n        this.state;\r\n        this.action_group.querySelectorAll('.view, .crop, .rotate').forEach(b=>b.addEventListener('click', e=>this.set_state(e.target.dataset.state)));\r\n\r\n        //mouse actions on canvas\r\n        this.start_x, this.start_y;\r\n        this.mouse_engaged = false;\r\n        this.crop = {x:null, y:null, width:null, height:null, start_x:null, start_y:null};\r\n        this.crop_state;\r\n        this.handle_radius = 4;\r\n        this.canvas.addEventListener('mousedown',this.mouse_down.bind(this));\r\n        window.addEventListener('mouseup',this.mouse_up.bind(this));\r\n        this.canvas.addEventListener('mousemove',this.mouse_move.bind(this));\r\n\r\n        //zoom buttons\r\n        this.zoom = 1.0;\r\n        this.zoom_in_button.addEventListener('click', this.zoom_in.bind(this));\r\n        this.zoom_out_button.addEventListener('click', this.zoom_out.bind(this));\r\n\r\n        //rotate buttons\r\n        this.rotate_actions.querySelectorAll('.counter-clockwise, .clockwise').forEach(b=>{\r\n            b.addEventListener('click', e=>{\r\n                let deg = e.target.dataset.rotate * this.rotate_angle;\r\n                this.rotate_image(deg);\r\n            });\r\n        });\r\n\r\n\r\n        //replace image\r\n        this.file_input.nextElementSibling.addEventListener('click', ()=>{\r\n            //clears file_input for Chrome\r\n            console.log('file_input clear');\r\n            this.file_input.value=null;\r\n        });\r\n        this.file_input.addEventListener('change', this.replace_image.bind(this));\r\n        //save image\r\n        this.save_button.addEventListener('click', this.save_image.bind(this));\r\n        //cancel button\r\n        if (this.cancel_button) this.cancel_button.addEventListener('click', this.clear_changes.bind(this));\r\n        //trash button\r\n        this.trash_button.addEventListener('click', this.remove_image.bind(this));\r\n\r\n        window.addEventListener('resize', ()=>{\r\n            if (this.dialog.open){\r\n                this.canvas.removeAttribute('width');\r\n                this.canvas.removeAttribute('height');\r\n                this.load_image(null, true);\r\n            }\r\n        });\r\n\r\n        console.log(this.canvas.width, this.canvas.height);\r\n        this.current_image = {\r\n            x:null, y:null,\r\n            width:null, height:null,\r\n            start_x:null, start_y:null\r\n        };\r\n        this.img.addEventListener('load', this.load_image.bind(this)); */\r\n    }\r\n    /* load_s3_file(file){\r\n        console.log('load_s3_file', file);\r\n        axios(file+'?_='+(new Date().getTime()),{\r\n            method:'get',\r\n            responseType:'blob',\r\n            headers: {\r\n              'Access-Control-Allow-Origin':'*',\r\n            }\r\n          }).then(result=>{\r\n            console.log(result);\r\n            this.dialog.showModal();\r\n            var reader = new FileReader();\r\n            reader.onloadend= () =>{\r\n                console.log('onloadend');\r\n                this.img.src = reader.result;\r\n            }\r\n            reader.readAsDataURL(result.data);\r\n\r\n        });\r\n    } */\r\n    load_image(e, keep_crop){\r\n        /* console.log('load_image');\r\n        console.log(devicePixelRatio);\r\n        try{\r\n            this.canvas.width = this.canvas.offsetWidth;\r\n            this.canvas.height = this.canvas.offsetHeight;\r\n\r\n            let cwidth = this.canvas.width;\r\n            let cheight = this.canvas.height;\r\n\r\n            let iwidth = this.img.width;\r\n            let iheight = this.img.height;\r\n\r\n            let is_wide = iwidth > iheight;\r\n            if ((is_wide && (iwidth < this.minwidth || iheight < this.minheight)) || (!is_wide && (iheight < this.minwidth || iwidth < this.minheight))){\r\n                throw new Error(\"Image doesn't meet minimum size\");\r\n            }\r\n            if (!is_wide && iwidth < this.minwidth){ //rotate automatically\r\n                this.rotate_image(90);\r\n                iwidth = this.img.width;\r\n                iheight = this.img.height;\r\n                is_wide = iwidth > iheight;\r\n            }\r\n\r\n            console.log(iwidth, iheight);\r\n\r\n            if (iheight < this.minwidth){\r\n                this.set_rotate_angles(180);\r\n            }else{\r\n                this.set_rotate_angles(90);\r\n            }\r\n\r\n            console.log('keep_crop', keep_crop);\r\n            if (!keep_crop){\r\n                this.crop = {\r\n                    x:0, y:is_wide ? 0 : iheight/2 - iwidth/2,\r\n                    width:iwidth, height:is_wide ? iheight : iwidth,\r\n                    start_x:null, start_y:null\r\n                };\r\n            }\r\n\r\n            this.width_ratio = iwidth / cwidth;\r\n            this.height_ratio = iheight / cheight;\r\n\r\n            console.log('cwidth', cwidth, 'cheight', cheight, 'width_ratio', this.width_ratio, 'height_ratio', this.height_ratio,\r\n            'iwidth/width_ratio', iwidth/this.width_ratio, 'iheight/width_ratio',iheight/this.width_ratio,\r\n            'iwidth/height_ratio', iwidth/this.height_ratio, 'iheight/height_ratio', iheight/this.height_ratio);\r\n            if (iwidth > cwidth || iheight > cheight){\r\n                if (iwidth/this.height_ratio > cwidth){//fit wide because the height is larger than the canvas\r\n                    this.ratio = this.width_ratio;\r\n                }else{//fit high\r\n                    this.ratio = this.height_ratio;\r\n                }\r\n\r\n                this.zoom = 1/this.ratio;\r\n            }else{\r\n                this.zoom = 1.0;\r\n\r\n                this.ratio = this.width_ratio;\r\n            }\r\n            console.log(this.width_ratio, this.height_ratio, this.ratio);\r\n            console.log('zoom', this.zoom);\r\n\r\n            let current = this.current_image;\r\n            current.width = iwidth * this.zoom;\r\n            current.height = iheight * this.zoom;\r\n\r\n            current.x = (cwidth - current.width)/2;\r\n            current.y = (cheight - current.height)/2;\r\n\r\n            console.log(current);\r\n            if (!this.state){\r\n                this.state = 'view';\r\n                this.set_view_mode();\r\n            }\r\n            this.set_state(this.state);\r\n        }catch(ex){\r\n            create_dialog_basic(ex.message);\r\n        } */\r\n\r\n    }\r\n    draw_image(){\r\n        /* console.log('draw_image');\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); //clear image\r\n\r\n        let current;\r\n        let src = {};\r\n        if (this.state=='view'){\r\n            src = (({x,y,width,height})=>({x,y,width,height}))(this.crop);\r\n            console.log(this.current_image);\r\n            current = {\r\n                x:this.current_image.x+this.crop.x*this.zoom,\r\n                y:this.current_image.y+this.crop.y*this.zoom,\r\n                width:this.crop.width*this.zoom,\r\n                height:this.crop.height*this.zoom\r\n            };\r\n            console.log(current, this.zoom);\r\n        }else{\r\n            src = {x:0,y:0, width:this.img.width, height:this.img.height};\r\n            current = this.current_image;\r\n        }\r\nconsole.log(src.x, src.y, src.width, src.height, //get all of source images\r\ncurrent.x, current.y,\r\ncurrent.width, current.height);\r\n        this.ctx.drawImage(this.img,\r\n            src.x, src.y, src.width, src.height, //get all of source images\r\n            current.x, current.y,\r\n            current.width, current.height); */\r\n    }\r\n    set_state(state){\r\n        /* console.log(state);\r\n        this.action_group.querySelectorAll('button').forEach(b=>b.classList.remove('selected'));\r\n        this.action_group.querySelector(`.${state}`).classList.add('selected');\r\n        this.state = state;\r\n        let states = ['view','crop','rotate'];\r\n        states.forEach(s=>{\r\n            if (s==state) this.canvas.classList.add(s);\r\n            else this.canvas.classList.remove(s);\r\n        });\r\n\r\n        if(state=='view'){\r\n            this.set_view_mode();\r\n        }else if (state=='crop'){\r\n            this.set_crop_mode();\r\n        }else if (state=='rotate'){\r\n            this.set_rotate_mode();\r\n        } */\r\n    }\r\n    set_view_mode(){\r\n        /* this.canvas.style.cursor = 'move';\r\n        this.hide_rotate_actions();\r\n        this.draw_image(); */\r\n    }\r\n    set_crop_mode(){\r\n        /* this.canvas.style.cursor = 'default';\r\n        this.hide_rotate_actions();\r\n        this.draw_image();\r\n        this.draw_cropper(); */\r\n    }\r\n    set_rotate_mode(){\r\n        /* this.show_rotate_actions();\r\n        this.canvas.style.cursor = 'default';\r\n        this.draw_image(); */\r\n    }\r\n    mouse_down(e){\r\n        /* this.mouse_engaged  = true;\r\n        this.start_x = e.offsetX;\r\n        this.start_y = e.offsetY;\r\n        if (this.state=='view'){\r\n            console.log(this.current);\r\n            this.current_image.start_x = this.current_image.x;\r\n            this.current_image.start_y = this.current_image.y;\r\n        }else if (this.state=='crop'){\r\n            this.crop.start_x = this.cropbox.x;\r\n            this.crop.start_y = this.cropbox.y;\r\n            if (this.crop_state=='default'){\r\n                this.current_image.start_x = this.current_image.x;\r\n                this.current_image.start_y = this.current_image.y;\r\n            }\r\n            console.log(this.crop);\r\n        } */\r\n    }\r\n    mouse_up(){\r\n        /* this.mouse_engaged = false; */\r\n    }\r\n    mouse_move(e){\r\n        /* let current_x = e.offsetX;\r\n        let current_y = e.offsetY;\r\n        let change_x = current_x - this.start_x;\r\n        let change_y = current_y - this.start_y;\r\n        let current = this.current_image;\r\n        if (this.mouse_engaged){\r\n            console.log(change_x, change_y);\r\n\r\n            if(this.state=='view'){ //move image\r\n                //bounds check\r\n                let x_pos = current.start_x+change_x;\r\n                let y_pos = current.start_y+change_y;\r\n\r\n                current.x = this.check_x_bounds(x_pos);\r\n                current.y = this.check_y_bounds(y_pos);\r\n                this.draw_image();\r\n            }else if (this.state=='crop'){\r\n                let x_pos = this.cropbox.x, y_pos = this.cropbox.y;\r\n                let crop_width = this.cropbox.width;\r\n                let crop_height = this.cropbox.height;\r\n                console.log(this.cropbox);\r\n                let cropright = this.cropbox.x+this.cropbox.width;\r\n                let cropbottom = this.cropbox.y+this.cropbox.height;\r\n\r\n                let left_resize = ()=>{\r\n                    if (current_x < current.x) x_pos=current.x; //don't grow beyond left edge\r\n                    else if (current_x > cropright - this.minwidth/this.ratio) x_pos=cropright-this.minwidth/this.ratio; //don't shrink smaller than minimum\r\n                    else if (current_x > cropright-crop_height) x_pos=cropright-crop_height; //don't shrink width more than height\r\n                    else x_pos = current_x;\r\n\r\n                    crop_width = cropright - x_pos;\r\n                };\r\n                let right_resize = ()=>{\r\n                    if (current_x < current.x+current.width  //don't grow beyond the right edge\r\n                    && current_x > this.cropbox.x + this.minwidth/this.ratio //don't shrink smaller than the minimum\r\n                    && current_x > current.x+crop_height) //don't shrink beyond width more than height\r\n                        crop_width = current_x - this.cropbox.x;\r\n                };\r\n                let top_resize = ()=>{\r\n                    if (current_y < current.y) y_pos=current.y; //don't grow beyond the top edge\r\n                    else if (current_y > cropbottom - this.minheight/this.ratio) y_pos=cropbottom-this.minheight/this.ratio; //don't shrink smaller than minimum\r\n                    else if (current_y < cropbottom-crop_width) y_pos=cropbottom-crop_width; //don't grow beyond width\r\n                    else y_pos = current_y;\r\n\r\n                    crop_height = cropbottom - y_pos;\r\n                }\r\n                let bottom_resize = ()=>{\r\n                    if (current_y < current.y+current.height //don't grow beyond the bottom edge\r\n                    && current_y > this.cropbox.y + this.minheight/this.ratio //don't shrink smaller than the minimum\r\n                    && current_y < this.cropbox.y+crop_width) //don't grow beyond the width\r\n                        crop_height = current_y - this.cropbox.y;\r\n                }\r\n                switch(this.crop_state){\r\n                    case 'nw-resize':\r\n                        top_resize();\r\n                        left_resize();\r\n                        break;\r\n                    case 'ne-resize':\r\n                        top_resize();\r\n                        right_resize();\r\n                        break;\r\n                    case 'sw-resize':\r\n                        bottom_resize();\r\n                        left_resize();\r\n                        break;\r\n                    case 'se-resize':\r\n                        bottom_resize();\r\n                        right_resize();\r\n                        break;\r\n                    case 'w-resize':\r\n                        left_resize();\r\n                        break;\r\n                    case 'e-resize':\r\n                        right_resize();\r\n                        break;\r\n                    case 'n-resize':\r\n                        top_resize();\r\n                        break;\r\n                    case 's-resize':\r\n                        bottom_resize();\r\n                        break;\r\n                    case 'move':\r\n                        x_pos = this.crop.start_x+change_x;\r\n                        y_pos = this.crop.start_y+change_y;\r\n\r\n                        if (x_pos < current.x){ //leftside\r\n                            x_pos = current.x;\r\n                        }else if (x_pos + crop_width > current.x + current.width){//rightside\r\n                            x_pos = current.x + current.width - crop_width;\r\n                        }\r\n                        if (y_pos < current.y){ //topside\r\n                            y_pos = current.y;\r\n                        }else if (y_pos + crop_height > current.y + current.height){//bottomside\r\n                            y_pos = current.y + current.height - crop_height;\r\n                        }\r\n                        break;\r\n                    default:\r\n\r\n                        current.x = this.check_x_bounds(current.start_x+change_x);\r\n                        current.y = this.check_y_bounds(current.start_y+change_y);\r\n                        x_pos = current.x + this.crop.x*this.zoom;\r\n                        y_pos = current.y + this.crop.y*this.zoom;\r\n                }\r\n\r\n                //console.log(this.crop_state, x_pos, current.x, cropright);\r\n                //cropbox.x = current.x  + this.crop.x*this.zoom,\r\n                //cropbox.x - current.x = this.crop.x*this.zoom\r\n                //(cropbox.x - current.x) / this.zoom = this.crop.x\r\n                this.crop.x = (x_pos - current.x)/this.zoom;\r\n                this.crop.y = (y_pos - current.y)/this.zoom;\r\n                this.crop.width = crop_width/this.zoom;\r\n                this.crop.height = crop_height/this.zoom;\r\n                console.log(this.crop);\r\n                this.draw_image();\r\n                this.draw_cropper();\r\n            }\r\n        }else{\r\n            let cropbox = this.cropbox;\r\n            let rightedge = cropbox.x + cropbox.width;\r\n            let bottomedge = cropbox.y + cropbox.height;\r\n            if (this.state=='crop'){\r\n                if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n                current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius){ //upper left\r\n                    this.crop_state = 'nw-resize';\r\n                }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n                current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius){ //upper right\r\n                    this.crop_state = 'ne-resize';\r\n                }else if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n                current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius){ //lower left\r\n                    this.crop_state = 'sw-resize';\r\n                }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n                current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius){ //lower right\r\n                    this.crop_state = 'se-resize';\r\n                }else if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n                current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //left edge\r\n                    this.crop_state = 'w-resize';\r\n                }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n                current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //right edge\r\n                    this.crop_state = 'e-resize';\r\n                }else if (current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius &&\r\n                current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius){ //top edge\r\n                    this.crop_state = 'n-resize';\r\n                }else if (current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius &&\r\n                current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius){ //top edge\r\n                    this.crop_state = 's-resize';\r\n                }else if (current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius &&\r\n                current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //inside\r\n                    this.crop_state = 'move';\r\n                } else{ //outside\r\n                    this.crop_state = 'default';\r\n                }\r\n                this.canvas.style.cursor = this.crop_state;\r\n\r\n            }\r\n        } */\r\n\r\n    }\r\n    check_x_bounds(x_pos){\r\n        /* let current = this.current_image;\r\n        if (current.width <= this.canvas.width){ //image is smaller than canvas\r\n            if (x_pos < 0){ //leftside\r\n                x_pos = 0;\r\n            }else if (x_pos + current.width > this.canvas.width){//rightside\r\n                x_pos = this.canvas.width - current.width;\r\n            }\r\n        }else{ //image is larger than canvas\r\n            if (x_pos + current.width < this.canvas.width){\r\n                x_pos = this.canvas.width - current.width; //leftside\r\n            }else if (x_pos > 0){\r\n                x_pos = 0; //rightside\r\n            }\r\n        }\r\n        return x_pos; */\r\n    }\r\n    check_y_bounds(y_pos){\r\n        /* let current = this.current_image;\r\n        if (current.height <= this.canvas.height){ //image is smaller than canvas\r\n            if (y_pos < 0){ //topside\r\n                y_pos = 0;\r\n            }else if (y_pos + current.height > this.canvas.height){//bottomside\r\n                y_pos = this.canvas.height - current.height;\r\n            }\r\n        }else{ //image is larger than canvas\r\n            if (y_pos + current.height < this.canvas.height){\r\n                y_pos = this.canvas.height - current.height; //topside\r\n            }else if (y_pos > 0){\r\n                y_pos = 0; //bottomside\r\n            }\r\n        }\r\n        return y_pos; */\r\n    }\r\n    zoom_in(){\r\n        /* let current = this.current_image;\r\n        this.scale(2.0); */\r\n    }\r\n    zoom_out(){\r\n        /* let current = this.current_image;\r\n        this.scale(.5); */\r\n    }\r\n    scale(scale){\r\n        /* //let scale = (this.zoom+zoom_change)/this.zoom;\r\n        let current = this.current_image;\r\n        let center_x = this.canvas.width / 2;\r\n        let center_y = this.canvas.height / 2;\r\n\r\n        let x_diff = current.x - center_x;\r\n        let y_diff = current.y - center_y;\r\n\r\n        //adjust width\r\n        current.width = current.width * scale;\r\n        current.height = current.height * scale;\r\n\r\n        //adjust x and y which gets shifted\r\n        let x_pos = center_x + x_diff * scale;\r\n        let y_pos = center_y + y_diff * scale;\r\n\r\n\r\n        current.x = this.check_x_bounds(x_pos);\r\n        current.y = this.check_y_bounds(y_pos);\r\n        console.log(scale, x_diff, y_diff, current.x, current.y);\r\n        this.ratio = this.width_ratio = this.img.width / current.width;\r\n        this.height_ratio = this.img.height / current.height;\r\n\r\n        this.zoom = this.zoom*scale;\r\n        console.log('zoom', this.zoom);\r\n        this.draw_image();\r\n        if (this.state=='crop'){\r\n            this.draw_cropper();\r\n        } */\r\n    }\r\n    draw_cropper(){\r\n        /* let ctx = this.ctx;\r\n        let cropbox = this.cropbox;\r\n\r\n        console.log(cropbox);\r\n\r\n\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = '#0095DA88';\r\n        ctx.fillStyle = '#0095DA88';\r\n\r\n\r\n        //main rectangle\r\n        ctx.beginPath();\r\n        ctx.rect(cropbox.x, cropbox.y, cropbox.width, cropbox.height);\r\n        let width3rd = cropbox.width*.33;\r\n        ctx.moveTo(cropbox.x + width3rd, cropbox.y);\r\n        ctx.lineTo(cropbox.x + width3rd, cropbox.y+cropbox.height);\r\n        ctx.moveTo(cropbox.x + width3rd*2, cropbox.y);\r\n        ctx.lineTo(cropbox.x + width3rd*2, cropbox.y+cropbox.height);\r\n        let height3rd = cropbox.height*.33;\r\n        ctx.moveTo(cropbox.x, cropbox.y + height3rd);\r\n        ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd);\r\n        ctx.moveTo(cropbox.x, cropbox.y + height3rd*2);\r\n        ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd*2);\r\n        ctx.stroke();\r\n        ctx.closePath;\r\n\r\n        //corner circles\r\n        let positions = [{x:cropbox.x, y:cropbox.y},{x:cropbox.x+cropbox.width, y:cropbox.y},\r\n            {x:cropbox.x, y:cropbox.y+cropbox.height},{x:cropbox.x+cropbox.width, y:cropbox.y+cropbox.height}];\r\n        positions.forEach(p=>{\r\n            ctx.beginPath();\r\n            ctx.arc(p.x, p.y, this.handle_radius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n        }); */\r\n    }\r\n    hide_rotate_actions(){\r\n        /* if (this.rotate_actions.style.opacity != 0){\r\n            this.rotate_actions.style.opacity = 0;\r\n            this.rotate_actions.addEventListener('transitionend',()=>{this.rotate_actions.style.display='none';console.log('display none')}, {once:true});\r\n        } */\r\n    }\r\n    show_rotate_actions(){\r\n        /* console.log('display flex');\r\n        this.rotate_actions.style.display = 'flex';\r\n        this.rotate_actions.style.opacity = 1; */\r\n    }\r\n    set_rotate_angles(deg){\r\n        /* this.rotate_angle = Math.abs(deg);\r\n        let counterclockwise = this.rotate_actions.querySelector('.counter-clockwise');\r\n        let clockwise = this.rotate_actions.querySelector('.clockwise');\r\n\r\n        counterclockwise.innerText = '-'+this.rotate_angle;\r\n        clockwise.innerText = '+'+this.rotate_angle; */\r\n    }\r\n    rotate_image(deg){\r\n        /* //let deg = e.target.dataset.rotate;\r\n        let img = this.img;\r\n        let angle = deg*Math.PI/180;\r\n        console.log('angle',angle);\r\n\r\n\r\n        let ncanvas = document.createElement('canvas');\r\n\r\n        ncanvas.width = parseInt(Math.abs(img.width * Math.cos(angle)) + Math.abs(img.height * Math.sin(angle))); //img.width;\r\n        ncanvas.height = parseInt(Math.abs(img.width * Math.sin(angle)) + Math.abs(img.height * Math.cos(angle))); //img.height;\r\n\r\n        console.log(ncanvas.width, ncanvas.height);\r\n\r\n        let ctx = ncanvas.getContext('2d');\r\n        //let wh_ratio = img.width/img.height;\r\n\r\n        ctx.translate(ncanvas.width/2, ncanvas.height/2);\r\n        ctx.rotate(angle);\r\n        ctx.translate(-ncanvas.width/2, -ncanvas.height/2);\r\n        ctx.drawImage(img, 0,0,\r\n            img.width,img.height,\r\n            (ncanvas.width-img.width)/2, -(ncanvas.width-img.width)/2,\r\n            img.width, img.height);\r\n        console.log((ncanvas.width-img.width)/2, -(ncanvas.width-img.width)/2,\r\n        img.width, img.height);\r\n        let img_url = ncanvas.toDataURL(\"image/png\");\r\n        this.img.src = img_url; */\r\n    }\r\n    replace_image(e){\r\n        /* console.log('replace_image', e.target.files);\r\n        const file = e.target.files[0];\r\n        console.log(file);\r\n        if (file && this.image_types.includes(file.type) && file.size < this.max_filesize){\r\n            const reader = new FileReader();\r\n            if (!this.dialog.open){\r\n                this.dialog.showModal();\r\n            }\r\n\r\n            reader.addEventListener(\"load\", () => {\r\n                // convert image file to base64 string\r\n                this.img.src = reader.result;\r\n\r\n            }, false);\r\n            if (file) {\r\n                reader.readAsDataURL(file);\r\n            }\r\n        }else if(file && this.max_filesize){\r\n            this.file_too_big();\r\n        }else if(file){\r\n            this.invalid_file();\r\n        }else{\r\n            window.create_dialog_basic('No file found');\r\n        } */\r\n    }\r\n    open_editor(){\r\n        /* console.log('open_editor');\r\n        this.dialog.showModal(); */\r\n    }\r\n    drop_image(file){\r\n        /* console.log('drop image', file);\r\n        const reader = new FileReader();\r\n        this.dialog.showModal();\r\n        reader.addEventListener(\"load\", () => {\r\n            // convert image file to base64 string\r\n            this.img.src = reader.result;\r\n\r\n        }, false);\r\n        reader.readAsDataURL(file); */\r\n    }\r\n    save_image(){\r\n        /* //create new canvas\r\n        let ncanvas = document.createElement('canvas');\r\n        let crop = this.crop;\r\n        ncanvas.width = crop.width;\r\n        ncanvas.height = crop.height;\r\n        let ctx = ncanvas.getContext('2d');\r\n        ctx.drawImage(this.img, crop.x, crop.y, crop.width, crop.height, 0, 0, ncanvas.width, ncanvas.height);\r\n        let img_url = ncanvas.toDataURL(\"image/png\");\r\n        this.wire_image.src = img_url;\r\n        this.wire_image.style.display = 'block';\r\n        this.image_selector.style.display = 'none';\r\n        this.edit_image_button.disabled = false;\r\n        this.filename_field.value = img_url;\r\n        this.dialog.close(); */\r\n    }\r\n    clear_changes(){\r\n        /* console.log('clear_changes');\r\n\r\n        this.img.src = '';\r\n\r\n        this.current_image = {\r\n            x:null, y:null,\r\n            width:null, height:null,\r\n            start_x:null, start_y:null\r\n        };\r\n\r\n        this.dialog.close(); */\r\n    }\r\n    remove_image(){\r\n        /* this.filename_field.value = '';\r\n        this.wire_image.src = '';\r\n        this.wire_image.style.display = 'none';\r\n        this.image_selector.style.display = 'flex';\r\n        this.edit_image_button.disabled = true;\r\n        let event = new InputEvent('change');\r\n        this.filename_field.dispatchEvent(event);\r\n        this.dialog.close(); */\r\n    }\r\n    initiate_edit_image(e){\r\n        /* let filename = document.querySelector('#wire-imageFilename').value;\r\n        let file;\r\n        console.log('INITIATE EDIT IMAGE', filename, this.image_data);\r\n        if (filename){\r\n            if (!this.image_data || this.image_data==location.href){\r\n                console.log('load_s3_file');\r\n                file = e.target.dataset.path + filename;\r\n                this.load_s3_file(file);\r\n            }else{\r\n                console.log('open_editor');\r\n                this.open_editor();\r\n            }\r\n\r\n        } */\r\n    }\r\n\r\n    invalid_file(){\r\n        /* window.create_dialog_basic('Only JPEGs, PNGs, GIFs, BMPs, or WebP allowed'); */\r\n    }\r\n    file_too_big(){\r\n        /* window.create_dialog_basic(`Filesize must be less than ${this.max_mb}MB`); */\r\n    }\r\n\r\n    /* get dialog(){return document.querySelector('#image-editor')}\r\n    get toolbar(){return this.dialog.querySelector('.toolbar')}\r\n    get action_group(){return this.dialog.querySelector('.actions')}\r\n    get zoom_in_button(){return this.dialog.querySelector('.zoom-in')}\r\n    get zoom_out_button(){return this.dialog.querySelector('.zoom-out')}\r\n    get rotate_actions(){return this.dialog.querySelector('.rotate-actions')}\r\n    get file_input(){return document.querySelector('#image-file')}\r\n    get save_button(){return this.dialog.querySelector('.buttons .save')}\r\n    get cancel_button(){return this.dialog.querySelector('.buttons .cancel')}\r\n    get trash_button(){return this.dialog.querySelector('.trash')}\r\n    get cropbox(){\r\n        let current = this.current_image;\r\n        return {\r\n            x: current.x + this.crop.x*this.zoom,\r\n            y: current.y + this.crop.y*this.zoom,\r\n            width: this.crop.width*this.zoom,\r\n            height: this.crop.height*this.zoom\r\n        };\r\n    }\r\n    get image_data(){return this.img.src}\r\n    get wire_image(){return document.querySelector('#wire-image-preview')}\r\n    get edit_image_button(){return document.querySelector('#edit-image')}\r\n    get filename_field(){return document.querySelector('#wire-imageFilename')}\r\n    get image_selector(){return document.querySelector('#image-selector')}\r\n    get edit_image_button(){return document.querySelector('#edit-image')}\r\n    get image_select(){return document.querySelector('#image-selector')} */\r\n\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,eAAe,MAAMA,WAAW;EAY5BC,WAAWA,CAACC,MAAM,EAAC;IAAA,KAFnBC,WAAW,GAAG,CAAC,YAAY,EAAC,WAAW,EAAC,YAAY,EAAC,WAAW,EAAC,WAAW,CAAC;IAGzE;IACAC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAEvC,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpBE,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;IACnB,IAAI,CAACI,GAAG,GAAG,IAAI,CAACJ,MAAM,CAACK,UAAU,CAAC,IAAI,CAAC;IACvC,IAAI,CAACC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACtB,IAAI,CAACD,GAAG,CAACE,WAAW,GAAG,WAAW;;IAGlC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAiBI;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEIC,UAAUA,CAACC,CAAC,EAAEC,SAAS,EAAC;IACpB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAhEQ;EAgFJC,UAAUA,CAAA,EAAE;IACR;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAxBQ;EA2BJC,SAASA,CAACC,KAAK,EAAC;IACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAfQ;EAkBJC,aAAaA,CAAA,EAAE;IACX;AACR;AACA;EAFQ;EAIJC,aAAaA,CAAA,EAAE;IACX;AACR;AACA;AACA;EAHQ;EAKJC,eAAeA,CAAA,EAAE;IACb;AACR;AACA;EAFQ;EAIJC,UAAUA,CAACR,CAAC,EAAC;IACT;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAfQ;EAijJQ;EA6JJW,cAAcA,CAACC,KAAK,EAAC;IACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAdQ;EAgBJC,cAAcA,CAACC,KAAK,EAAC;IACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAdQ;EAgBJC,OAAOA,CAAA,EAAE;IACL;AACR;EADQ;EAGJC,QAAQA,CAAA,EAAE;IACN;AACR;EADQ;EAGJC,KAAKA,CAACA,KAAK,EAAC;IACR;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAtBQ;EA8BJC,YAAYA,CAAA,EAAE;IACV;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EA7BQ;EAqCJC,mBAAmBA,CAAA,EAAE;IACjB;AACR;AACA;AACA;EAHQ;EAKJC,mBAAmBA,CAAA,EAAE;IACjB;AACR;AACA;EAFQ;EAIJC,iBAAiBA,CAACC,GAAG,EAAC;IAClB;AACR;AACA;AACA;AACA;EAJQ;EAOJC,YAAYA,CAACD,GAAG,EAAC;IACb;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EApBQ;EA4BJE,aAAaA,CAACxB,CAAC,EAAC;IACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EArBQ;EAyBJyB,WAAWA,CAAA,EAAE;IACT;AACR;EADQ;EAGJC,UAAUA,CAACC,IAAI,EAAC;IACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;EAPQ;EAUJC,UAAUA,CAAA,EAAE;IACR;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAbQ;EAeJC,aAAaA,CAAA,EAAE;IACX;AACR;AACA;AACA;AACA;AACA;AACA;AACA;EAPQ;EAYJC,YAAYA,CAAA,EAAE;IACV;AACR;AACA;AACA;AACA;AACA;AACA;AACA;EAPQ;EASJC,mBAAmBA,CAAC/B,CAAC,EAAC;IAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAZQ;EAgBJgC,YAAYA,CAAA,EAAE;IACV;EAAA;EAEJC,YAAYA,CAAA,EAAE;IACV;EAAA;;EAGJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}