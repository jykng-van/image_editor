{"ast":null,"code":"export default class ImageEditor {\n  //presented on canvas image info\n\n  constructor(canvas, message_callback) {\n    //the canvas object\n    //2nd context of the canvas\n    //the image being modified\n    //non-zoom ratio of the image based on sizing to meet the max dimension\n    //the zoom ratio of the image\n    //the zoom ratio of the image based on width\n    //the zoom ratio of the image based on height\n    this.max_zoom = 4.0;\n    //zoom level\n    this.min_dimension = 64;\n    //minimum dimension of the image, for cropping and what's permitted\n    this.max_dimension = 1920;\n    //the mouse action mode\n    this.rotate_angle = 90;\n    //callback for external message function\n    this.image_types = ['image/jpeg', 'image/png', 'image/webp', 'image/gif', 'image/bmp'];\n    //y coordinates when first clicked\n    this.mouse_engaged = false;\n    //is the mouse down\n    //cropping stuff\n    this.crop = {\n      x: null,\n      y: null,\n      width: null,\n      height: null,\n      start_x: null,\n      start_y: null\n    };\n    //the which cropping editing method to be used\n    this.handle_radius = 4;\n    //radius of the crop handles\n    this.current_image = {\n      x: null,\n      y: null,\n      width: null,\n      height: null,\n      start_x: null,\n      start_y: null\n    };\n    //possible max width 2056\n    console.log('ImageEditor constructor!');\n    this.canvas = canvas;\n    console.log(canvas);\n    this.ctx = this.canvas.getContext('2d');\n    this.img = new Image();\n    this.img.crossOrigin = 'Anonymous';\n    this.message_callback = message_callback;\n    this.mode = 'view';\n    this.rotating = false;\n\n    //mouse actions on canvas\n    this.canvas.addEventListener('mousedown', this.mouse_down.bind(this));\n    window.addEventListener('mouseup', this.mouse_up.bind(this));\n    this.canvas.addEventListener('mousemove', this.mouse_move.bind(this));\n\n    //zoom buttons\n    this.zoom = 1.0;\n    window.addEventListener('resize', () => {\n      //redraw on window resize, such as opening and closing the dev console\n      console.log('resize');\n      if (this.canvas.offsetParent !== null && this.img.src) {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        this.load_image(null, true);\n      }\n    });\n    this.img.addEventListener('load', this.load_image.bind(this)); //important to run when image is done loading, otherwise no dimensions\n    console.log(this.canvas.width, this.canvas.height);\n  }\n  set_img_src(src) {\n    this.img.src = src;\n  }\n  load_image(e, keep_crop = false) {\n    console.log('load_image', e);\n    console.log(devicePixelRatio);\n    if (this.rotating) {\n      //if rotating keep crop and zoom level\n      keep_crop = true;\n      this.rotating = false;\n    }\n    try {\n      this.canvas.width = this.canvas.offsetWidth;\n      this.canvas.height = this.canvas.offsetHeight;\n      let cwidth = this.canvas.width;\n      let cheight = this.canvas.height;\n      let iwidth = this.img.width;\n      let iheight = this.img.height;\n      let is_wide = iwidth > iheight;\n      console.log('is_wide', is_wide, iwidth, iheight);\n      if (iwidth < this.min_dimension || iheight < this.min_dimension) {\n        //minimum size check\n        throw new Error(\"Image doesn't meet minimum size\");\n      }\n\n      //get adjusted ratio to keep image within max\n      if (iwidth > this.max_dimension && is_wide) {\n        console.log('reduce width');\n        this.adjusted_ratio = this.max_dimension / iwidth;\n      } else if (iheight > this.max_dimension) {\n        console.log('reduce height');\n        this.adjusted_ratio = this.max_dimension / iheight;\n      } else {\n        this.adjusted_ratio = 1.0;\n      }\n      console.log('keep_crop', keep_crop);\n      if (!keep_crop) {\n        this.crop = {\n          x: 0,\n          y: 0,\n          width: iwidth,\n          height: iheight,\n          start_x: null,\n          start_y: null\n        };\n      }\n      this.width_ratio = iwidth * this.adjusted_ratio / cwidth;\n      this.height_ratio = iheight * this.adjusted_ratio / cheight;\n      console.log('cwidth', cwidth, 'cheight', cheight, 'adjusted_ratio', this.adjusted_ratio, 'width_ratio', this.width_ratio, 'height_ratio', this.height_ratio, 'iwidth/width_ratio', iwidth / this.width_ratio, 'iheight/width_ratio', iheight / this.width_ratio, 'iwidth/height_ratio', iwidth / this.height_ratio, 'iheight/height_ratio', iheight / this.height_ratio);\n      //fill height or fill width\n      if (iwidth * this.adjusted_ratio > cwidth || iheight * this.adjusted_ratio > cheight) {\n        //try to fit into canvas\n        if (iwidth * this.adjusted_ratio / this.height_ratio > cwidth) {\n          //fit wide because the height is larger than the canvas\n          this.ratio = this.width_ratio;\n        } else {\n          //fit high\n          this.ratio = this.height_ratio;\n        }\n        this.fit_zoom = this.adjusted_ratio / this.ratio;\n      } else {\n        this.fit_zoom = this.adjusted_ratio;\n        this.ratio = this.width_ratio;\n      }\n      //check for zoom levels, based on keep crop or not\n      if (!keep_crop) {\n        this.zoom = this.fit_zoom;\n      } else {\n        this.zoom = Math.max(this.fit_zoom, this.zoom);\n      }\n      console.log('ratio', this.ratio);\n      console.log('zoom', this.zoom);\n      console.log('crop', this.crop);\n      let current = this.current_image;\n      current.width = iwidth * this.zoom;\n      current.height = iheight * this.zoom;\n      current.x = (cwidth - current.width) / 2;\n      current.y = (cheight - current.height) / 2;\n      console.log('current', current);\n      this.set_mode(this.mode);\n    } catch (ex) {\n      this.message_callback(ex.message);\n    }\n  }\n  //Draw the scale image on the canvas\n  draw_image() {\n    console.log('draw_image');\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); //clear image\n\n    let src = {\n      x: 0,\n      y: 0,\n      width: this.img.width,\n      height: this.img.height\n    };\n    let current = this.current_image;\n    console.log('src.x', src.x, 'src.y', src.y, 'src.width', src.width, 'src.height', src.height,\n    //get all of source images\n    'current.x', current.x, 'current.y', current.y, 'current.width', current.width, 'current.height', current.height);\n\n    //draw whole image at lower opacity\n    this.ctx.globalAlpha = 0.5;\n    this.ctx.drawImage(this.img, src.x, src.y, src.width, src.height,\n    //get all of source images\n    current.x, current.y, current.width, current.height);\n    //then draw cropped area at full opacity\n    this.ctx.globalAlpha = 1;\n    src = (({\n      x,\n      y,\n      width,\n      height\n    }) => ({\n      x,\n      y,\n      width,\n      height\n    }))(this.crop);\n    console.log('src.x', src.x, 'src.y', src.y, 'src.width', src.width, 'src.height', src.height);\n    this.ctx.drawImage(this.img, src.x, src.y, src.width, src.height,\n    //get all of source images\n    this.current_image.x + this.crop.x * this.zoom, this.current_image.y + this.crop.y * this.zoom, this.crop.width * this.zoom, this.crop.height * this.zoom);\n  }\n  draw_cropper() {\n    let ctx = this.ctx;\n    let cropbox = this.cropbox;\n    console.log(cropbox);\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#0095DA88';\n    ctx.fillStyle = '#0095DA88';\n\n    //main rectangle\n    ctx.beginPath();\n    ctx.rect(cropbox.x, cropbox.y, cropbox.width, cropbox.height);\n    let width3rd = cropbox.width * .33;\n    ctx.moveTo(cropbox.x + width3rd, cropbox.y);\n    ctx.lineTo(cropbox.x + width3rd, cropbox.y + cropbox.height);\n    ctx.moveTo(cropbox.x + width3rd * 2, cropbox.y);\n    ctx.lineTo(cropbox.x + width3rd * 2, cropbox.y + cropbox.height);\n    let height3rd = cropbox.height * .33;\n    ctx.moveTo(cropbox.x, cropbox.y + height3rd);\n    ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd);\n    ctx.moveTo(cropbox.x, cropbox.y + height3rd * 2);\n    ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd * 2);\n    ctx.stroke();\n    ctx.closePath();\n\n    //corner circles\n    let positions = [{\n      x: cropbox.x,\n      y: cropbox.y\n    }, {\n      x: cropbox.x + cropbox.width,\n      y: cropbox.y\n    }, {\n      x: cropbox.x,\n      y: cropbox.y + cropbox.height\n    }, {\n      x: cropbox.x + cropbox.width,\n      y: cropbox.y + cropbox.height\n    }];\n    positions.forEach(p => {\n      ctx.beginPath();\n      ctx.arc(p.x, p.y, this.handle_radius, 0, 2 * Math.PI, false);\n      ctx.fill();\n      ctx.closePath();\n    });\n  }\n  set_mode(mode) {\n    console.log('set_mode', mode);\n    this.mode = mode;\n    if (mode === 'view') {\n      this.set_view_mode();\n    } else if (mode === 'crop') {\n      this.set_crop_mode();\n    }\n  }\n  set_view_mode() {\n    this.canvas.style.cursor = 'move';\n    this.draw_image();\n  }\n  set_crop_mode() {\n    this.canvas.style.cursor = 'default';\n    this.draw_image();\n    this.draw_cropper();\n  }\n  mouse_down(e) {\n    this.mouse_engaged = true;\n    this.start_x = e.offsetX;\n    this.start_y = e.offsetY;\n    if (this.mode === 'view') {\n      console.log(this.current);\n      this.current_image.start_x = this.current_image.x;\n      this.current_image.start_y = this.current_image.y;\n    } else if (this.mode === 'crop') {\n      this.crop.start_x = this.cropbox.x;\n      this.crop.start_y = this.cropbox.y;\n      if (this.crop_state === 'default') {\n        this.current_image.start_x = this.current_image.x;\n        this.current_image.start_y = this.current_image.y;\n      }\n      console.log(this.crop);\n    }\n  }\n  mouse_up() {\n    this.mouse_engaged = false;\n  }\n  mouse_move(e) {\n    let current_x = e.offsetX;\n    let current_y = e.offsetY;\n    let change_x = current_x - this.start_x;\n    let change_y = current_y - this.start_y;\n    let current = this.current_image;\n    if (this.mouse_engaged) {\n      console.log(change_x, change_y);\n      if (this.mode === 'view') {\n        //move image\n        //bounds check\n        let x_pos = current.start_x + change_x;\n        let y_pos = current.start_y + change_y;\n        current.x = this.check_x_bounds(x_pos);\n        current.y = this.check_y_bounds(y_pos);\n        this.draw_image();\n      } else if (this.mode === 'crop') {\n        let x_pos = this.cropbox.x,\n          y_pos = this.cropbox.y;\n        let crop_width = this.cropbox.width;\n        let crop_height = this.cropbox.height;\n        console.log(this.cropbox);\n        let cropright = this.cropbox.x + this.cropbox.width;\n        let cropbottom = this.cropbox.y + this.cropbox.height;\n        let left_resize = () => {\n          if (current_x < current.x) x_pos = current.x; //don't grow beyond left edge\n          else if (current_x > cropright - this.min_dimension / this.ratio) x_pos = cropright - this.min_dimension / this.ratio; //don't shrink smaller than minimum\n          else x_pos = current_x;\n          crop_width = cropright - x_pos;\n        };\n        let right_resize = () => {\n          if (current_x < current.x + current.width //don't grow beyond the right edge\n          && current_x > this.cropbox.x + this.min_dimension / this.ratio)\n            //don't shrink smaller than the minimum\n            crop_width = current_x - this.cropbox.x;\n        };\n        let top_resize = () => {\n          if (current_y < current.y) y_pos = current.y; //don't grow beyond the top edge\n          else if (current_y > cropbottom - this.min_dimension / this.ratio) y_pos = cropbottom - this.minheight / this.ratio; //don't shrink smaller than minimum\n          else y_pos = current_y;\n          crop_height = cropbottom - y_pos;\n        };\n        let bottom_resize = () => {\n          if (current_y < current.y + current.height //don't grow beyond the bottom edge\n          && current_y > this.cropbox.y + this.min_dimension / this.ratio)\n            //don't shrink smaller than the minimum\n            crop_height = current_y - this.cropbox.y;\n        };\n        switch (this.crop_state) {\n          case 'nw-resize':\n            top_resize();\n            left_resize();\n            break;\n          case 'ne-resize':\n            top_resize();\n            right_resize();\n            break;\n          case 'sw-resize':\n            bottom_resize();\n            left_resize();\n            break;\n          case 'se-resize':\n            bottom_resize();\n            right_resize();\n            break;\n          case 'w-resize':\n            left_resize();\n            break;\n          case 'e-resize':\n            right_resize();\n            break;\n          case 'n-resize':\n            top_resize();\n            break;\n          case 's-resize':\n            bottom_resize();\n            break;\n          case 'move':\n            x_pos = this.crop.start_x + change_x;\n            y_pos = this.crop.start_y + change_y;\n            if (x_pos < current.x) {\n              //leftside\n              x_pos = current.x;\n            } else if (x_pos + crop_width > current.x + current.width) {\n              //rightside\n              x_pos = current.x + current.width - crop_width;\n            }\n            if (y_pos < current.y) {\n              //topside\n              y_pos = current.y;\n            } else if (y_pos + crop_height > current.y + current.height) {\n              //bottomside\n              y_pos = current.y + current.height - crop_height;\n            }\n            break;\n          default:\n            current.x = this.check_x_bounds(current.start_x + change_x);\n            current.y = this.check_y_bounds(current.start_y + change_y);\n            x_pos = current.x + this.crop.x * this.zoom;\n            y_pos = current.y + this.crop.y * this.zoom;\n        }\n        this.crop.x = (x_pos - current.x) / this.zoom;\n        this.crop.y = (y_pos - current.y) / this.zoom;\n        this.crop.width = crop_width / this.zoom;\n        this.crop.height = crop_height / this.zoom;\n        console.log(this.crop);\n        this.draw_image();\n        this.draw_cropper();\n      }\n    } else {\n      let cropbox = this.cropbox;\n      let rightedge = cropbox.x + cropbox.width;\n      let bottomedge = cropbox.y + cropbox.height;\n      if (this.mode === 'crop') {\n        if (current_x >= cropbox.x - this.handle_radius && current_x <= cropbox.x + this.handle_radius && current_y >= cropbox.y - this.handle_radius && current_y <= cropbox.y + this.handle_radius) {\n          //upper left\n          this.crop_state = 'nw-resize';\n        } else if (current_x >= rightedge - this.handle_radius && current_x <= rightedge + this.handle_radius && current_y >= cropbox.y - this.handle_radius && current_y <= cropbox.y + this.handle_radius) {\n          //upper right\n          this.crop_state = 'ne-resize';\n        } else if (current_x >= cropbox.x - this.handle_radius && current_x <= cropbox.x + this.handle_radius && current_y >= bottomedge - this.handle_radius && current_y <= bottomedge + this.handle_radius) {\n          //lower left\n          this.crop_state = 'sw-resize';\n        } else if (current_x >= rightedge - this.handle_radius && current_x <= rightedge + this.handle_radius && current_y >= bottomedge - this.handle_radius && current_y <= bottomedge + this.handle_radius) {\n          //lower right\n          this.crop_state = 'se-resize';\n        } else if (current_x >= cropbox.x - this.handle_radius && current_x <= cropbox.x + this.handle_radius && current_y > cropbox.y + this.handle_radius && current_y < bottomedge - this.handle_radius) {\n          //left edge\n          this.crop_state = 'w-resize';\n        } else if (current_x >= rightedge - this.handle_radius && current_x <= rightedge + this.handle_radius && current_y > cropbox.y + this.handle_radius && current_y < bottomedge - this.handle_radius) {\n          //right edge\n          this.crop_state = 'e-resize';\n        } else if (current_y >= cropbox.y - this.handle_radius && current_y <= cropbox.y + this.handle_radius && current_x > cropbox.x + this.handle_radius && current_x < rightedge - this.handle_radius) {\n          //top edge\n          this.crop_state = 'n-resize';\n        } else if (current_y >= bottomedge - this.handle_radius && current_y <= bottomedge + this.handle_radius && current_x > cropbox.x + this.handle_radius && current_x < rightedge - this.handle_radius) {\n          //top edge\n          this.crop_state = 's-resize';\n        } else if (current_x > cropbox.x + this.handle_radius && current_x < rightedge - this.handle_radius && current_y > cropbox.y + this.handle_radius && current_y < bottomedge - this.handle_radius) {\n          //inside\n          this.crop_state = 'move';\n        } else {\n          //outside\n          this.crop_state = 'default';\n        }\n        this.canvas.style.cursor = this.crop_state;\n      }\n    }\n  }\n  check_x_bounds(x_pos) {\n    let current = this.current_image;\n    if (current.width <= this.canvas.width) {\n      //image is smaller than canvas\n      if (x_pos < 0) {\n        //leftside\n        x_pos = 0;\n      } else if (x_pos + current.width > this.canvas.width) {\n        //rightside\n        x_pos = this.canvas.width - current.width;\n      }\n    } else {\n      //image is larger than canvas\n      if (x_pos + current.width < this.canvas.width) {\n        x_pos = this.canvas.width - current.width; //leftside\n      } else if (x_pos > 0) {\n        x_pos = 0; //rightside\n      }\n    }\n    return x_pos;\n  }\n  check_y_bounds(y_pos) {\n    let current = this.current_image;\n    if (current.height <= this.canvas.height) {\n      //image is smaller than canvas\n      if (y_pos < 0) {\n        //topside\n        y_pos = 0;\n      } else if (y_pos + current.height > this.canvas.height) {\n        //bottomside\n        y_pos = this.canvas.height - current.height;\n      }\n    } else {\n      //image is larger than canvas\n      if (y_pos + current.height < this.canvas.height) {\n        y_pos = this.canvas.height - current.height; //topside\n      } else if (y_pos > 0) {\n        y_pos = 0; //bottomside\n      }\n    }\n    return y_pos;\n  }\n  zoom_in() {\n    this.scale(2.0);\n  }\n  zoom_out() {\n    this.scale(.5);\n  }\n  scale(scale) {\n    //let scale = (this.zoom+zoom_change)/this.zoom;\n    let current = this.current_image;\n    let center_x = this.canvas.width / 2;\n    let center_y = this.canvas.height / 2;\n    let is_wide = this.img.width > this.img.height;\n    console.log('is_wide', is_wide);\n    let new_zoom = this.zoom * scale;\n    if (scale < 1.0 && new_zoom < this.fit_zoom) {\n      console.log('zoom out too small');\n      new_zoom = this.fit_zoom;\n    }\n    new_zoom = Math.min(this.max_zoom, new_zoom);\n    console.log('new_zoom', new_zoom);\n    scale = new_zoom / this.zoom;\n    console.log('scale', scale);\n    let x_diff = current.x - center_x;\n    let y_diff = current.y - center_y;\n\n    //adjust width\n    current.width = current.width * scale;\n    current.height = current.height * scale;\n\n    //adjust x and y which gets shifted\n    let x_pos = center_x + x_diff * scale;\n    let y_pos = center_y + y_diff * scale;\n    current.x = this.check_x_bounds(x_pos);\n    current.y = this.check_y_bounds(y_pos);\n    console.log(scale, x_diff, y_diff, current.x, current.y);\n    this.ratio = this.width_ratio = this.img.width / current.width;\n    this.height_ratio = this.img.height / current.height;\n    this.zoom = new_zoom;\n    console.log('zoom', this.zoom);\n    this.draw_image();\n    if (this.mode === 'crop') {\n      this.draw_cropper();\n    }\n  }\n  rotate_image(deg) {\n    //let deg = e.target.dataset.rotate;\n    let img = this.img;\n    let angle = deg * Math.PI / 180;\n    console.log('angle', angle);\n    let ncanvas = document.createElement('canvas');\n    ncanvas.width = img.height;\n    ncanvas.height = img.width;\n    console.log(ncanvas.width, ncanvas.height);\n\n    //rotate crop area\n    if (deg === 90) {\n      [this.crop.x, this.crop.y] = [this.img.height - this.crop.y - this.crop.height, this.crop.x];\n    } else if (deg === -90) {\n      [this.crop.x, this.crop.y] = [this.crop.y, this.img.width - this.crop.x - this.crop.width];\n    }\n    [this.crop.width, this.crop.height] = [this.crop.height, this.crop.width];\n    console.log('new crop', this.crop);\n    let ctx = ncanvas.getContext('2d');\n    //let wh_ratio = img.width/img.height;\n\n    ctx.translate(ncanvas.width / 2, ncanvas.height / 2);\n    ctx.rotate(angle);\n    ctx.translate(-ncanvas.width / 2, -ncanvas.height / 2);\n    ctx.drawImage(img, 0, 0, img.width, img.height, (ncanvas.width - img.width) / 2, -(ncanvas.width - img.width) / 2, img.width, img.height);\n    console.log((ncanvas.width - img.width) / 2, -(ncanvas.width - img.width) / 2, img.width, img.height);\n    let img_url = ncanvas.toDataURL(\"image/png\");\n    this.rotating = true; //to keep crop\n    this.img.src = img_url;\n  }\n  save_image() {\n    //create new canvas\n    let ncanvas = document.createElement('canvas');\n    let crop = this.crop;\n    ncanvas.width = crop.width;\n    ncanvas.height = crop.height;\n    let ctx = ncanvas.getContext('2d');\n    ctx.drawImage(this.img, crop.x, crop.y, crop.width, crop.height, 0, 0, ncanvas.width, ncanvas.height);\n    let img_url = ncanvas.toDataURL(\"image/png\");\n    return img_url;\n  }\n  invalid_file() {\n    this.message_callback('Only JPEGs, PNGs, GIFs, BMPs, or WebP allowed');\n  }\n  get cropbox() {\n    let current = this.current_image;\n    return {\n      x: current.x + this.crop.x * this.zoom,\n      y: current.y + this.crop.y * this.zoom,\n      width: this.crop.width * this.zoom,\n      height: this.crop.height * this.zoom\n    };\n  }\n}","map":{"version":3,"names":["ImageEditor","constructor","canvas","message_callback","max_zoom","min_dimension","max_dimension","rotate_angle","image_types","mouse_engaged","crop","x","y","width","height","start_x","start_y","handle_radius","current_image","console","log","ctx","getContext","img","Image","crossOrigin","mode","rotating","addEventListener","mouse_down","bind","window","mouse_up","mouse_move","zoom","offsetParent","src","removeAttribute","load_image","set_img_src","e","keep_crop","devicePixelRatio","offsetWidth","offsetHeight","cwidth","cheight","iwidth","iheight","is_wide","Error","adjusted_ratio","width_ratio","height_ratio","ratio","fit_zoom","Math","max","current","set_mode","ex","message","draw_image","clearRect","globalAlpha","drawImage","draw_cropper","cropbox","lineWidth","strokeStyle","fillStyle","beginPath","rect","width3rd","moveTo","lineTo","height3rd","stroke","closePath","positions","forEach","p","arc","PI","fill","set_view_mode","set_crop_mode","style","cursor","offsetX","offsetY","crop_state","current_x","current_y","change_x","change_y","x_pos","y_pos","check_x_bounds","check_y_bounds","crop_width","crop_height","cropright","cropbottom","left_resize","right_resize","top_resize","minheight","bottom_resize","rightedge","bottomedge","zoom_in","scale","zoom_out","center_x","center_y","new_zoom","min","x_diff","y_diff","rotate_image","deg","angle","ncanvas","document","createElement","translate","rotate","img_url","toDataURL","save_image","invalid_file"],"sources":["C:/Users/Jason/projects/project_showcase/image_editor/src/ImageEditor.js"],"sourcesContent":["export default class ImageEditor{\r\n    canvas; //the canvas object\r\n    ctx; //2nd context of the canvas\r\n    img; //the image being modified\r\n\r\n    adjusted_ratio; //non-zoom ratio of the image based on sizing to meet the max dimension\r\n    ratio; //the zoom ratio of the image\r\n    width_ratio; //the zoom ratio of the image based on width\r\n    height_ratio; //the zoom ratio of the image based on height\r\n    max_zoom = 4.0; //the maximum zoom level\r\n    fit_zoom; //fit zoom level\r\n    zoom; //zoom level\r\n\r\n    min_dimension = 64; //minimum dimension of the image, for cropping and what's permitted\r\n    max_dimension = 1920; //maximum dimension of the image, which will resize if too big\r\n    mode; //the mouse action mode\r\n    rotate_angle = 90; //angle of rotation\r\n    rotating; //if the image is being rotated (to signal to img load event handler)\r\n\r\n    message_callback; //callback for external message function\r\n\r\n    image_types = ['image/jpeg','image/png','image/webp','image/gif','image/bmp']; //acceptable mimetypes for images\r\n\r\n    //mouse stuff\r\n    start_x; //x coordinates when first clicked\r\n    start_y; //y coordinates when first clicked\r\n    mouse_engaged = false; //is the mouse down\r\n\r\n    //cropping stuff\r\n    crop = {x:null, y:null, width:null, height:null, start_x:null, start_y:null}; //info on the crop\r\n    crop_state; //the which cropping editing method to be used\r\n    handle_radius = 4; //radius of the crop handles\r\n    current_image = {\r\n        x:null, y:null,\r\n        width:null, height:null,\r\n        start_x:null, start_y:null\r\n    }; //presented on canvas image info\r\n\r\n    constructor(canvas, message_callback){\r\n        //possible max width 2056\r\n        console.log('ImageEditor constructor!');\r\n\r\n        this.canvas = canvas;\r\n        console.log(canvas);\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.img = new Image();\r\n        this.img.crossOrigin = 'Anonymous';\r\n\r\n        this.message_callback = message_callback;\r\n        this.mode = 'view';\r\n        this.rotating = false;\r\n\r\n        //mouse actions on canvas\r\n        this.canvas.addEventListener('mousedown',this.mouse_down.bind(this));\r\n        window.addEventListener('mouseup',this.mouse_up.bind(this));\r\n        this.canvas.addEventListener('mousemove',this.mouse_move.bind(this));\r\n\r\n        //zoom buttons\r\n        this.zoom = 1.0;\r\n\r\n        window.addEventListener('resize', ()=>{ //redraw on window resize, such as opening and closing the dev console\r\n            console.log('resize');\r\n            if (this.canvas.offsetParent !== null && this.img.src){\r\n                this.canvas.removeAttribute('width');\r\n                this.canvas.removeAttribute('height');\r\n                this.load_image(null, true);\r\n            }\r\n        });\r\n        this.img.addEventListener('load', this.load_image.bind(this)); //important to run when image is done loading, otherwise no dimensions\r\n        console.log(this.canvas.width, this.canvas.height);\r\n    }\r\n    set_img_src(src){\r\n        this.img.src = src;\r\n    }\r\n    load_image(e, keep_crop=false){\r\n        console.log('load_image', e);\r\n        console.log(devicePixelRatio);\r\n        if (this.rotating){ //if rotating keep crop and zoom level\r\n            keep_crop = true;\r\n            this.rotating = false;\r\n        }\r\n\r\n        try{\r\n            this.canvas.width = this.canvas.offsetWidth;\r\n            this.canvas.height = this.canvas.offsetHeight;\r\n\r\n            let cwidth = this.canvas.width;\r\n            let cheight = this.canvas.height;\r\n\r\n            let iwidth = this.img.width;\r\n            let iheight = this.img.height;\r\n\r\n            let is_wide = iwidth > iheight;\r\n            console.log('is_wide', is_wide, iwidth, iheight);\r\n            if (iwidth < this.min_dimension || iheight < this.min_dimension){ //minimum size check\r\n                throw new Error(\"Image doesn't meet minimum size\");\r\n            }\r\n\r\n            //get adjusted ratio to keep image within max\r\n            if (iwidth > this.max_dimension && is_wide){\r\n                console.log('reduce width');\r\n                this.adjusted_ratio = this.max_dimension / iwidth;\r\n            }else if (iheight > this.max_dimension){\r\n                console.log('reduce height');\r\n                this.adjusted_ratio = this.max_dimension  / iheight;\r\n            }else{\r\n                this.adjusted_ratio = 1.0;\r\n            }\r\n            console.log('keep_crop', keep_crop);\r\n            if (!keep_crop){\r\n                this.crop = {\r\n                    x:0, y:0,\r\n                    width:iwidth, height:iheight,\r\n                    start_x:null, start_y:null\r\n                };\r\n            }\r\n\r\n            this.width_ratio = (iwidth * this.adjusted_ratio) / cwidth;\r\n            this.height_ratio = (iheight * this.adjusted_ratio) / cheight;\r\n\r\n            console.log('cwidth', cwidth, 'cheight', cheight, 'adjusted_ratio', this.adjusted_ratio,\r\n            'width_ratio', this.width_ratio, 'height_ratio', this.height_ratio,\r\n            'iwidth/width_ratio', iwidth/this.width_ratio, 'iheight/width_ratio',iheight/this.width_ratio,\r\n            'iwidth/height_ratio', iwidth/this.height_ratio, 'iheight/height_ratio', iheight/this.height_ratio);\r\n            //fill height or fill width\r\n            if (iwidth * this.adjusted_ratio > cwidth || iheight * this.adjusted_ratio > cheight){ //try to fit into canvas\r\n                if (iwidth*this.adjusted_ratio/this.height_ratio > cwidth){//fit wide because the height is larger than the canvas\r\n                    this.ratio = this.width_ratio;\r\n                }else{//fit high\r\n                    this.ratio = this.height_ratio;\r\n                }\r\n                this.fit_zoom = this.adjusted_ratio/this.ratio;\r\n            }else{\r\n                this.fit_zoom = this.adjusted_ratio;\r\n                this.ratio = this.width_ratio;\r\n            }\r\n            //check for zoom levels, based on keep crop or not\r\n            if (!keep_crop){\r\n                this.zoom = this.fit_zoom;\r\n            }else{\r\n                this.zoom = Math.max(this.fit_zoom, this.zoom);\r\n\r\n            }\r\n            console.log('ratio', this.ratio);\r\n            console.log('zoom', this.zoom);\r\n            console.log('crop', this.crop);\r\n\r\n            let current = this.current_image;\r\n            current.width = iwidth * this.zoom;\r\n            current.height = iheight * this.zoom;\r\n\r\n            current.x = (cwidth - current.width)/2;\r\n            current.y = (cheight - current.height)/2;\r\n\r\n            console.log('current', current);\r\n            this.set_mode(this.mode);\r\n        }catch(ex){\r\n            this.message_callback(ex.message);\r\n        }\r\n\r\n    }\r\n    //Draw the scale image on the canvas\r\n    draw_image(){\r\n        console.log('draw_image');\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); //clear image\r\n\r\n        let src = {x:0,y:0, width:this.img.width, height:this.img.height};\r\n        let current = this.current_image;\r\n        console.log('src.x', src.x, 'src.y', src.y, 'src.width', src.width, 'src.height', src.height, //get all of source images\r\n        'current.x', current.x, 'current.y', current.y, 'current.width', current.width, 'current.height', current.height);\r\n\r\n        //draw whole image at lower opacity\r\n        this.ctx.globalAlpha = 0.5;\r\n        this.ctx.drawImage(this.img,\r\n            src.x, src.y, src.width, src.height, //get all of source images\r\n            current.x, current.y,\r\n            current.width, current.height);\r\n        //then draw cropped area at full opacity\r\n        this.ctx.globalAlpha = 1;\r\n        src = (({x,y,width,height})=>({x,y,width,height}))(this.crop);\r\n        console.log('src.x', src.x, 'src.y', src.y, 'src.width', src.width, 'src.height', src.height);\r\n        this.ctx.drawImage(this.img,\r\n            src.x, src.y, src.width, src.height, //get all of source images\r\n            this.current_image.x+this.crop.x*this.zoom,\r\n            this.current_image.y+this.crop.y*this.zoom,\r\n            this.crop.width*this.zoom,\r\n            this.crop.height*this.zoom);\r\n    }\r\n\r\n    draw_cropper(){\r\n        let ctx = this.ctx;\r\n        let cropbox = this.cropbox;\r\n        console.log(cropbox);\r\n\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = '#0095DA88';\r\n        ctx.fillStyle = '#0095DA88';\r\n\r\n        //main rectangle\r\n        ctx.beginPath();\r\n        ctx.rect(cropbox.x, cropbox.y, cropbox.width, cropbox.height);\r\n        let width3rd = cropbox.width*.33;\r\n        ctx.moveTo(cropbox.x + width3rd, cropbox.y);\r\n        ctx.lineTo(cropbox.x + width3rd, cropbox.y+cropbox.height);\r\n        ctx.moveTo(cropbox.x + width3rd*2, cropbox.y);\r\n        ctx.lineTo(cropbox.x + width3rd*2, cropbox.y+cropbox.height);\r\n        let height3rd = cropbox.height*.33;\r\n        ctx.moveTo(cropbox.x, cropbox.y + height3rd);\r\n        ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd);\r\n        ctx.moveTo(cropbox.x, cropbox.y + height3rd*2);\r\n        ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd*2);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        //corner circles\r\n        let positions = [{x:cropbox.x, y:cropbox.y},{x:cropbox.x+cropbox.width, y:cropbox.y},\r\n            {x:cropbox.x, y:cropbox.y+cropbox.height},{x:cropbox.x+cropbox.width, y:cropbox.y+cropbox.height}];\r\n        positions.forEach(p=>{\r\n            ctx.beginPath();\r\n            ctx.arc(p.x, p.y, this.handle_radius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n        });\r\n    }\r\n    set_mode(mode){\r\n        console.log('set_mode', mode);\r\n        this.mode = mode;\r\n\r\n        if(mode==='view'){\r\n            this.set_view_mode();\r\n        }else if (mode==='crop'){\r\n            this.set_crop_mode();\r\n        }\r\n    }\r\n    set_view_mode(){\r\n        this.canvas.style.cursor = 'move';\r\n        this.draw_image();\r\n    }\r\n    set_crop_mode(){\r\n        this.canvas.style.cursor = 'default';\r\n        this.draw_image();\r\n        this.draw_cropper();\r\n    }\r\n    mouse_down(e){\r\n        this.mouse_engaged  = true;\r\n        this.start_x = e.offsetX;\r\n        this.start_y = e.offsetY;\r\n        if (this.mode==='view'){\r\n            console.log(this.current);\r\n            this.current_image.start_x = this.current_image.x;\r\n            this.current_image.start_y = this.current_image.y;\r\n        }else if (this.mode==='crop'){\r\n            this.crop.start_x = this.cropbox.x;\r\n            this.crop.start_y = this.cropbox.y;\r\n            if (this.crop_state==='default'){\r\n                this.current_image.start_x = this.current_image.x;\r\n                this.current_image.start_y = this.current_image.y;\r\n            }\r\n            console.log(this.crop);\r\n        }\r\n    }\r\n    mouse_up(){\r\n        this.mouse_engaged = false;\r\n    }\r\n    mouse_move(e){\r\n        let current_x = e.offsetX;\r\n        let current_y = e.offsetY;\r\n        let change_x = current_x - this.start_x;\r\n        let change_y = current_y - this.start_y;\r\n        let current = this.current_image;\r\n        if (this.mouse_engaged){\r\n            console.log(change_x, change_y);\r\n\r\n            if(this.mode==='view'){ //move image\r\n                //bounds check\r\n                let x_pos = current.start_x+change_x;\r\n                let y_pos = current.start_y+change_y;\r\n\r\n                current.x = this.check_x_bounds(x_pos);\r\n                current.y = this.check_y_bounds(y_pos);\r\n                this.draw_image();\r\n            }else if (this.mode==='crop'){\r\n                let x_pos = this.cropbox.x, y_pos = this.cropbox.y;\r\n                let crop_width = this.cropbox.width;\r\n                let crop_height = this.cropbox.height;\r\n                console.log(this.cropbox);\r\n                let cropright = this.cropbox.x+this.cropbox.width;\r\n                let cropbottom = this.cropbox.y+this.cropbox.height;\r\n\r\n                let left_resize = ()=>{\r\n                    if (current_x < current.x) x_pos=current.x; //don't grow beyond left edge\r\n                    else if (current_x > cropright - this.min_dimension/this.ratio) x_pos=cropright-this.min_dimension/this.ratio; //don't shrink smaller than minimum\r\n                    else x_pos = current_x;\r\n\r\n                    crop_width = cropright - x_pos;\r\n                };\r\n                let right_resize = ()=>{\r\n                    if (current_x < current.x+current.width  //don't grow beyond the right edge\r\n                    && current_x > this.cropbox.x + this.min_dimension/this.ratio) //don't shrink smaller than the minimum\r\n                        crop_width = current_x - this.cropbox.x;\r\n                };\r\n                let top_resize = ()=>{\r\n                    if (current_y < current.y) y_pos=current.y; //don't grow beyond the top edge\r\n                    else if (current_y > cropbottom - this.min_dimension/this.ratio) y_pos=cropbottom-this.minheight/this.ratio; //don't shrink smaller than minimum\r\n                    else y_pos = current_y;\r\n\r\n                    crop_height = cropbottom - y_pos;\r\n                }\r\n                let bottom_resize = ()=>{\r\n                    if (current_y < current.y+current.height //don't grow beyond the bottom edge\r\n                    && current_y > this.cropbox.y + this.min_dimension/this.ratio) //don't shrink smaller than the minimum\r\n                        crop_height = current_y - this.cropbox.y;\r\n                }\r\n                switch(this.crop_state){\r\n                    case 'nw-resize':\r\n                        top_resize();\r\n                        left_resize();\r\n                        break;\r\n                    case 'ne-resize':\r\n                        top_resize();\r\n                        right_resize();\r\n                        break;\r\n                    case 'sw-resize':\r\n                        bottom_resize();\r\n                        left_resize();\r\n                        break;\r\n                    case 'se-resize':\r\n                        bottom_resize();\r\n                        right_resize();\r\n                        break;\r\n                    case 'w-resize':\r\n                        left_resize();\r\n                        break;\r\n                    case 'e-resize':\r\n                        right_resize();\r\n                        break;\r\n                    case 'n-resize':\r\n                        top_resize();\r\n                        break;\r\n                    case 's-resize':\r\n                        bottom_resize();\r\n                        break;\r\n                    case 'move':\r\n                        x_pos = this.crop.start_x+change_x;\r\n                        y_pos = this.crop.start_y+change_y;\r\n\r\n                        if (x_pos < current.x){ //leftside\r\n                            x_pos = current.x;\r\n                        }else if (x_pos + crop_width > current.x + current.width){//rightside\r\n                            x_pos = current.x + current.width - crop_width;\r\n                        }\r\n                        if (y_pos < current.y){ //topside\r\n                            y_pos = current.y;\r\n                        }else if (y_pos + crop_height > current.y + current.height){//bottomside\r\n                            y_pos = current.y + current.height - crop_height;\r\n                        }\r\n                        break;\r\n                    default:\r\n\r\n                        current.x = this.check_x_bounds(current.start_x+change_x);\r\n                        current.y = this.check_y_bounds(current.start_y+change_y);\r\n                        x_pos = current.x + this.crop.x*this.zoom;\r\n                        y_pos = current.y + this.crop.y*this.zoom;\r\n                }\r\n\r\n                this.crop.x = (x_pos - current.x)/this.zoom;\r\n                this.crop.y = (y_pos - current.y)/this.zoom;\r\n                this.crop.width = crop_width/this.zoom;\r\n                this.crop.height = crop_height/this.zoom;\r\n                console.log(this.crop);\r\n                this.draw_image();\r\n                this.draw_cropper();\r\n            }\r\n        }else{\r\n            let cropbox = this.cropbox;\r\n            let rightedge = cropbox.x + cropbox.width;\r\n            let bottomedge = cropbox.y + cropbox.height;\r\n            if (this.mode==='crop'){\r\n                if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n                current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius){ //upper left\r\n                    this.crop_state = 'nw-resize';\r\n                }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n                current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius){ //upper right\r\n                    this.crop_state = 'ne-resize';\r\n                }else if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n                current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius){ //lower left\r\n                    this.crop_state = 'sw-resize';\r\n                }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n                current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius){ //lower right\r\n                    this.crop_state = 'se-resize';\r\n                }else if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n                current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //left edge\r\n                    this.crop_state = 'w-resize';\r\n                }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n                current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //right edge\r\n                    this.crop_state = 'e-resize';\r\n                }else if (current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius &&\r\n                current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius){ //top edge\r\n                    this.crop_state = 'n-resize';\r\n                }else if (current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius &&\r\n                current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius){ //top edge\r\n                    this.crop_state = 's-resize';\r\n                }else if (current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius &&\r\n                current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //inside\r\n                    this.crop_state = 'move';\r\n                } else{ //outside\r\n                    this.crop_state = 'default';\r\n                }\r\n                this.canvas.style.cursor = this.crop_state;\r\n\r\n            }\r\n        }\r\n    }\r\n    check_x_bounds(x_pos){\r\n        let current = this.current_image;\r\n        if (current.width <= this.canvas.width){ //image is smaller than canvas\r\n            if (x_pos < 0){ //leftside\r\n                x_pos = 0;\r\n            }else if (x_pos + current.width > this.canvas.width){//rightside\r\n                x_pos = this.canvas.width - current.width;\r\n            }\r\n        }else{ //image is larger than canvas\r\n            if (x_pos + current.width < this.canvas.width){\r\n                x_pos = this.canvas.width - current.width; //leftside\r\n            }else if (x_pos > 0){\r\n                x_pos = 0; //rightside\r\n            }\r\n        }\r\n        return x_pos;\r\n    }\r\n    check_y_bounds(y_pos){\r\n        let current = this.current_image;\r\n        if (current.height <= this.canvas.height){ //image is smaller than canvas\r\n            if (y_pos < 0){ //topside\r\n                y_pos = 0;\r\n            }else if (y_pos + current.height > this.canvas.height){//bottomside\r\n                y_pos = this.canvas.height - current.height;\r\n            }\r\n        }else{ //image is larger than canvas\r\n            if (y_pos + current.height < this.canvas.height){\r\n                y_pos = this.canvas.height - current.height; //topside\r\n            }else if (y_pos > 0){\r\n                y_pos = 0; //bottomside\r\n            }\r\n        }\r\n        return y_pos;\r\n    }\r\n    zoom_in(){\r\n        this.scale(2.0);\r\n    }\r\n    zoom_out(){\r\n        this.scale(.5);\r\n    }\r\n    scale(scale){\r\n        //let scale = (this.zoom+zoom_change)/this.zoom;\r\n        let current = this.current_image;\r\n        let center_x = this.canvas.width / 2;\r\n        let center_y = this.canvas.height / 2;\r\n\r\n        let is_wide = this.img.width > this.img.height;\r\n        console.log('is_wide',is_wide);\r\n        let new_zoom = this.zoom * scale;\r\n        if (scale<1.0 && new_zoom < this.fit_zoom){\r\n            console.log('zoom out too small');\r\n            new_zoom = this.fit_zoom;\r\n        }\r\n        new_zoom = Math.min(this.max_zoom, new_zoom);\r\n        console.log('new_zoom',new_zoom);\r\n        scale = new_zoom / this.zoom;\r\n        console.log('scale',scale);\r\n\r\n        let x_diff = current.x - center_x;\r\n        let y_diff = current.y - center_y;\r\n\r\n        //adjust width\r\n        current.width = current.width * scale;\r\n        current.height = current.height * scale;\r\n\r\n        //adjust x and y which gets shifted\r\n        let x_pos = center_x + x_diff * scale;\r\n        let y_pos = center_y + y_diff * scale;\r\n\r\n\r\n        current.x = this.check_x_bounds(x_pos);\r\n        current.y = this.check_y_bounds(y_pos);\r\n        console.log(scale, x_diff, y_diff, current.x, current.y);\r\n        this.ratio = this.width_ratio = this.img.width / current.width;\r\n        this.height_ratio = this.img.height / current.height;\r\n\r\n        this.zoom = new_zoom;\r\n\r\n\r\n        console.log('zoom', this.zoom);\r\n        this.draw_image();\r\n        if (this.mode==='crop'){\r\n            this.draw_cropper();\r\n        }\r\n    }\r\n    rotate_image(deg){\r\n        //let deg = e.target.dataset.rotate;\r\n        let img = this.img;\r\n        let angle = deg*Math.PI/180;\r\n        console.log('angle',angle);\r\n\r\n\r\n        let ncanvas = document.createElement('canvas');\r\n        ncanvas.width = img.height;\r\n        ncanvas.height = img.width;\r\n\r\n        console.log(ncanvas.width, ncanvas.height);\r\n\r\n        //rotate crop area\r\n        if (deg === 90){\r\n            [this.crop.x, this.crop.y] = [this.img.height-this.crop.y-this.crop.height, this.crop.x];\r\n        }else if (deg === -90){\r\n            [this.crop.x, this.crop.y] = [this.crop.y, this.img.width-this.crop.x-this.crop.width];\r\n        }\r\n        [this.crop.width, this.crop.height] = [this.crop.height, this.crop.width];\r\n        console.log('new crop', this.crop);\r\n\r\n        let ctx = ncanvas.getContext('2d');\r\n        //let wh_ratio = img.width/img.height;\r\n\r\n        ctx.translate(ncanvas.width/2, ncanvas.height/2);\r\n        ctx.rotate(angle);\r\n        ctx.translate(-ncanvas.width/2, -ncanvas.height/2);\r\n        ctx.drawImage(img, 0,0,\r\n            img.width,img.height,\r\n            (ncanvas.width-img.width)/2, -(ncanvas.width-img.width)/2,\r\n            img.width, img.height);\r\n        console.log((ncanvas.width-img.width)/2, -(ncanvas.width-img.width)/2,\r\n        img.width, img.height);\r\n        let img_url = ncanvas.toDataURL(\"image/png\");\r\n        this.rotating = true; //to keep crop\r\n        this.img.src = img_url;\r\n    }\r\n\r\n    save_image(){\r\n        //create new canvas\r\n        let ncanvas = document.createElement('canvas');\r\n        let crop = this.crop;\r\n        ncanvas.width = crop.width;\r\n        ncanvas.height = crop.height;\r\n        let ctx = ncanvas.getContext('2d');\r\n        ctx.drawImage(this.img, crop.x, crop.y, crop.width, crop.height, 0, 0, ncanvas.width, ncanvas.height);\r\n        let img_url = ncanvas.toDataURL(\"image/png\");\r\n        return img_url;\r\n    }\r\n\r\n\r\n    invalid_file(){\r\n        this.message_callback('Only JPEGs, PNGs, GIFs, BMPs, or WebP allowed');\r\n    }\r\n\r\n\r\n    get cropbox(){\r\n        let current = this.current_image;\r\n        return {\r\n            x: current.x + this.crop.x*this.zoom,\r\n            y: current.y + this.crop.y*this.zoom,\r\n            width: this.crop.width*this.zoom,\r\n            height: this.crop.height*this.zoom\r\n        };\r\n    }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}