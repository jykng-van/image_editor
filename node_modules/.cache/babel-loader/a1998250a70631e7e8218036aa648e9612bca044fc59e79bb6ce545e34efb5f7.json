{"ast":null,"code":"/* import axios from \"axios\";\r\nimport {} from \"./validation\"; */\nexport default class ImageEditor {\n  //presented on canvas image info\n\n  constructor(canvas, message_callback) {\n    //the canvas object\n    //2nd context of the canvas\n    //the image being modified\n    //non-zoom ratio of the image based on sizing to meet the max dimension\n    //the zoom ratio of the image\n    //the zoom ratio of the image based on width\n    //the zoom ratio of the image based on height\n    //zoom level\n    this.min_dimension = 64;\n    //minimum dimension of the image, for cropping and what's permitted\n    this.max_dimension = 1920;\n    this.rotate_angle = 90;\n    this.image_types = ['image/jpeg', 'image/png', 'image/webp', 'image/gif', 'image/bmp'];\n    //y coordinates when first clicked\n    this.mouse_engaged = false;\n    //is the moouse down\n    //cropping stuff\n    this.crop = {\n      x: null,\n      y: null,\n      width: null,\n      height: null,\n      start_x: null,\n      start_y: null\n    };\n    this.handle_radius = 4;\n    //distance from the crop handles\n    this.current_image = {\n      x: null,\n      y: null,\n      width: null,\n      height: null,\n      start_x: null,\n      start_y: null\n    };\n    //possible max width 2056\n    console.log('ImageEditor constructor!');\n    this.canvas = canvas;\n    console.log(canvas);\n    this.ctx = this.canvas.getContext('2d');\n    this.img = new Image();\n    this.img.crossOrigin = 'Anonymous';\n    this.message_callback = message_callback;\n\n    //init state\n    /* this.action_group.querySelectorAll('.view, .crop, .rotate').forEach(b=>b.addEventListener('click', e=>this.set_state(e.target.dataset.state))); */\n\n    //mouse actions on canvas\n    this.canvas.addEventListener('mousedown', this.mouse_down.bind(this));\n    window.addEventListener('mouseup', this.mouse_up.bind(this));\n    this.canvas.addEventListener('mousemove', this.mouse_move.bind(this));\n\n    //zoom buttons\n    this.zoom = 1.0;\n    /*\r\n    //rotate buttons\r\n    this.rotate_actions.querySelectorAll('.counter-clockwise, .clockwise').forEach(b=>{\r\n        b.addEventListener('click', e=>{\r\n            let deg = e.target.dataset.rotate * this.rotate_angle;\r\n            this.rotate_image(deg);\r\n        });\r\n    });\r\n        //replace image\r\n    this.file_input.nextElementSibling.addEventListener('click', ()=>{\r\n        //clears file_input for Chrome\r\n        console.log('file_input clear');\r\n        this.file_input.value=null;\r\n    });\r\n    this.file_input.addEventListener('change', this.replace_image.bind(this));\r\n    //save image\r\n    this.save_button.addEventListener('click', this.save_image.bind(this));\r\n     */\n\n    window.addEventListener('resize', () => {\n      if (this.canvas.offsetParent !== null) {\n        this.canvas.removeAttribute('width');\n        this.canvas.removeAttribute('height');\n        this.load_image(this.img.src, true);\n      }\n    });\n    console.log(this.canvas.width, this.canvas.height);\n  }\n  load_image(src, keep_crop) {\n    this.img.src = src;\n    console.log(src);\n    console.log('load_image');\n    console.log(devicePixelRatio);\n    try {\n      this.canvas.width = this.canvas.offsetWidth;\n      this.canvas.height = this.canvas.offsetHeight;\n      let cwidth = this.canvas.width;\n      let cheight = this.canvas.height;\n      let iwidth = this.img.width;\n      let iheight = this.img.height;\n      let is_wide = iwidth > iheight;\n      console.log('is_wide', is_wide);\n      if (iwidth < this.min_dimension || iheight < this.min_dimension) {\n        throw new Error(\"Image doesn't meet minimum size\");\n      }\n      /* if (!is_wide && iwidth < this.minwidth){ //rotate automatically\r\n          this.rotate_image(90);\r\n          iwidth = this.img.width;\r\n          iheight = this.img.height;\r\n          is_wide = iwidth > iheight;\r\n      } */\n\n      console.log(iwidth, iheight);\n\n      /* if (iheight < this.minwidth){\r\n          this.set_rotate_angles(180);\r\n      }else{\r\n          this.set_rotate_angles(90);\r\n      } */\n      console.log('keep_crop', keep_crop);\n      if (!keep_crop) {\n        this.crop = {\n          /* x:0, y:is_wide ? 0 : iheight/2 - iwidth/2,\r\n          width:iwidth, height:is_wide ? iheight : iwidth, */\n          x: 0,\n          y: 0,\n          width: iwidth,\n          height: iheight,\n          start_x: null,\n          start_y: null\n        };\n      }\n      if (iwidth > this.max_dimension && !is_wide) {\n        console.log('reduce width');\n        this.adjusted_ratio = this.max_dimension / iwidth;\n      } else if (iheight > this.max_dimension) {\n        console.log('reduce height');\n        this.adjusted_ratio = this.max_dimension / iheight;\n      } else {\n        this.adjusted_ratio = 1.0;\n      }\n      this.width_ratio = iwidth * this.adjusted_ratio / cwidth;\n      this.height_ratio = iheight * this.adjusted_ratio / cheight;\n      console.log('cwidth', cwidth, 'cheight', cheight, 'adjusted_ratio', this.adjusted_ratio, 'width_ratio', this.width_ratio, 'height_ratio', this.height_ratio, 'iwidth/width_ratio', iwidth / this.width_ratio, 'iheight/width_ratio', iheight / this.width_ratio, 'iwidth/height_ratio', iwidth / this.height_ratio, 'iheight/height_ratio', iheight / this.height_ratio);\n      //fill height or fill width\n      if (iwidth > cwidth || iheight > cheight) {\n        if (iwidth / this.height_ratio > cwidth) {\n          //fit wide because the height is larger than the canvas\n          this.ratio = this.width_ratio;\n        } else {\n          //fit high\n          this.ratio = this.height_ratio;\n        }\n        this.zoom = 1 / this.ratio;\n      } else {\n        this.zoom = 1.0;\n        this.ratio = this.width_ratio;\n      }\n      console.log(this.width_ratio, this.height_ratio, this.ratio);\n      console.log('zoom', this.zoom);\n      console.log('crop', this.crop);\n      let current = this.current_image;\n      current.width = iwidth * this.adjusted_ratio * this.zoom;\n      current.height = iheight * this.adjusted_ratio * this.zoom;\n      current.x = (cwidth - current.width) / 2;\n      current.y = (cheight - current.height) / 2;\n      console.log(current);\n      if (!this.state) {\n        this.state = 'view';\n        this.set_view_mode();\n      }\n      this.set_state(this.state);\n    } catch (ex) {\n      this.message_callback(ex.message);\n    }\n  }\n  draw_image() {\n    console.log('draw_image');\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); //clear image\n\n    let current;\n    let src = {};\n    if (this.state === 'view') {\n      src = (({\n        x,\n        y,\n        width,\n        height\n      }) => ({\n        x,\n        y,\n        width,\n        height\n      }))(this.crop);\n      console.log(this.current_image);\n      current = {\n        x: this.current_image.x + this.crop.x * this.zoom,\n        y: this.current_image.y + this.crop.y * this.zoom,\n        width: this.crop.width * this.zoom,\n        height: this.crop.height * this.zoom\n      };\n      console.log(current, this.zoom);\n    } else {\n      src = {\n        x: 0,\n        y: 0,\n        width: this.img.width,\n        height: this.img.height\n      };\n      current = this.current_image;\n    }\n    console.log(src.x, src.y, src.width, src.height,\n    //get all of source images\n    current.x, current.y, current.width, current.height);\n    this.ctx.drawImage(this.img, src.x, src.y, src.width, src.height,\n    //get all of source images\n    current.x, current.y, current.width, current.height);\n  }\n  set_state(state) {\n    console.log(state);\n    /* this.action_group.querySelectorAll('button').forEach(b=>b.classList.remove('selected'));\r\n    this.action_group.querySelector(`.${state}`).classList.add('selected'); */\n    this.state = state;\n    let states = ['view', 'crop', 'rotate'];\n    states.forEach(s => {\n      if (s === state) this.canvas.classList.add(s);else this.canvas.classList.remove(s);\n    });\n    if (state === 'view') {\n      this.set_view_mode();\n    } else if (state === 'crop') {\n      this.set_crop_mode();\n    } else if (state === 'rotate') {\n      this.set_rotate_mode();\n    }\n  }\n  set_view_mode() {\n    this.canvas.style.cursor = 'move';\n    //this.hide_rotate_actions();\n    this.draw_image();\n  }\n  set_crop_mode() {\n    this.canvas.style.cursor = 'default';\n    //this.hide_rotate_actions();\n    this.draw_image();\n    this.draw_cropper();\n  }\n  set_rotate_mode() {\n    /* this.show_rotate_actions();\r\n    this.canvas.style.cursor = 'default';\r\n    this.draw_image(); */\n  }\n  mouse_down(e) {\n    this.mouse_engaged = true;\n    this.start_x = e.offsetX;\n    this.start_y = e.offsetY;\n    if (this.state === 'view') {\n      console.log(this.current);\n      this.current_image.start_x = this.current_image.x;\n      this.current_image.start_y = this.current_image.y;\n    } else if (this.state === 'crop') {\n      this.crop.start_x = this.cropbox.x;\n      this.crop.start_y = this.cropbox.y;\n      if (this.crop_state === 'default') {\n        this.current_image.start_x = this.current_image.x;\n        this.current_image.start_y = this.current_image.y;\n      }\n      console.log(this.crop);\n    }\n  }\n  mouse_up() {\n    this.mouse_engaged = false;\n  }\n  mouse_move(e) {\n    let current_x = e.offsetX;\n    let current_y = e.offsetY;\n    let change_x = current_x - this.start_x;\n    let change_y = current_y - this.start_y;\n    let current = this.current_image;\n    if (this.mouse_engaged) {\n      console.log(change_x, change_y);\n      if (this.state === 'view') {\n        //move image\n        //bounds check\n        let x_pos = current.start_x + change_x;\n        let y_pos = current.start_y + change_y;\n        current.x = this.check_x_bounds(x_pos);\n        current.y = this.check_y_bounds(y_pos);\n        this.draw_image();\n      } else if (this.state === 'crop') {\n        let x_pos = this.cropbox.x,\n          y_pos = this.cropbox.y;\n        let crop_width = this.cropbox.width;\n        let crop_height = this.cropbox.height;\n        console.log(this.cropbox);\n        let cropright = this.cropbox.x + this.cropbox.width;\n        let cropbottom = this.cropbox.y + this.cropbox.height;\n        let left_resize = () => {\n          if (current_x < current.x) x_pos = current.x; //don't grow beyond left edge\n          else if (current_x > cropright - this.min_dimension / this.ratio) x_pos = cropright - this.min_dimension / this.ratio; //don't shrink smaller than minimum\n          else if (current_x > cropright - crop_height) x_pos = cropright - crop_height; //don't shrink width more than height\n          else x_pos = current_x;\n          crop_width = cropright - x_pos;\n        };\n        let right_resize = () => {\n          if (current_x < current.x + current.width //don't grow beyond the right edge\n          && current_x > this.cropbox.x + this.min_dimension / this.ratio //don't shrink smaller than the minimum\n          && current_x > current.x + crop_height)\n            //don't shrink beyond width more than height\n            crop_width = current_x - this.cropbox.x;\n        };\n        let top_resize = () => {\n          if (current_y < current.y) y_pos = current.y; //don't grow beyond the top edge\n          else if (current_y > cropbottom - this.minheight / this.ratio) y_pos = cropbottom - this.minheight / this.ratio; //don't shrink smaller than minimum\n          else if (current_y < cropbottom - crop_width) y_pos = cropbottom - crop_width; //don't grow beyond width\n          else y_pos = current_y;\n          crop_height = cropbottom - y_pos;\n        };\n        let bottom_resize = () => {\n          if (current_y < current.y + current.height //don't grow beyond the bottom edge\n          && current_y > this.cropbox.y + this.minheight / this.ratio //don't shrink smaller than the minimum\n          && current_y < this.cropbox.y + crop_width)\n            //don't grow beyond the width\n            crop_height = current_y - this.cropbox.y;\n        };\n        switch (this.crop_state) {\n          case 'nw-resize':\n            top_resize();\n            left_resize();\n            break;\n          case 'ne-resize':\n            top_resize();\n            right_resize();\n            break;\n          case 'sw-resize':\n            bottom_resize();\n            left_resize();\n            break;\n          case 'se-resize':\n            bottom_resize();\n            right_resize();\n            break;\n          case 'w-resize':\n            left_resize();\n            break;\n          case 'e-resize':\n            right_resize();\n            break;\n          case 'n-resize':\n            top_resize();\n            break;\n          case 's-resize':\n            bottom_resize();\n            break;\n          case 'move':\n            x_pos = this.crop.start_x + change_x;\n            y_pos = this.crop.start_y + change_y;\n            if (x_pos < current.x) {\n              //leftside\n              x_pos = current.x;\n            } else if (x_pos + crop_width > current.x + current.width) {\n              //rightside\n              x_pos = current.x + current.width - crop_width;\n            }\n            if (y_pos < current.y) {\n              //topside\n              y_pos = current.y;\n            } else if (y_pos + crop_height > current.y + current.height) {\n              //bottomside\n              y_pos = current.y + current.height - crop_height;\n            }\n            break;\n          default:\n            current.x = this.check_x_bounds(current.start_x + change_x);\n            current.y = this.check_y_bounds(current.start_y + change_y);\n            x_pos = current.x + this.crop.x * this.zoom;\n            y_pos = current.y + this.crop.y * this.zoom;\n        }\n\n        //console.log(this.crop_state, x_pos, current.x, cropright);\n        //cropbox.x = current.x  + this.crop.x*this.zoom,\n        //cropbox.x - current.x = this.crop.x*this.zoom\n        //(cropbox.x - current.x) / this.zoom = this.crop.x\n        this.crop.x = (x_pos - current.x) / this.zoom;\n        this.crop.y = (y_pos - current.y) / this.zoom;\n        this.crop.width = crop_width / this.zoom;\n        this.crop.height = crop_height / this.zoom;\n        console.log(this.crop);\n        this.draw_image();\n        this.draw_cropper();\n      }\n    } else {\n      let cropbox = this.cropbox;\n      let rightedge = cropbox.x + cropbox.width;\n      let bottomedge = cropbox.y + cropbox.height;\n      if (this.state == 'crop') {\n        if (current_x >= cropbox.x - this.handle_radius && current_x <= cropbox.x + this.handle_radius && current_y >= cropbox.y - this.handle_radius && current_y <= cropbox.y + this.handle_radius) {\n          //upper left\n          this.crop_state = 'nw-resize';\n        } else if (current_x >= rightedge - this.handle_radius && current_x <= rightedge + this.handle_radius && current_y >= cropbox.y - this.handle_radius && current_y <= cropbox.y + this.handle_radius) {\n          //upper right\n          this.crop_state = 'ne-resize';\n        } else if (current_x >= cropbox.x - this.handle_radius && current_x <= cropbox.x + this.handle_radius && current_y >= bottomedge - this.handle_radius && current_y <= bottomedge + this.handle_radius) {\n          //lower left\n          this.crop_state = 'sw-resize';\n        } else if (current_x >= rightedge - this.handle_radius && current_x <= rightedge + this.handle_radius && current_y >= bottomedge - this.handle_radius && current_y <= bottomedge + this.handle_radius) {\n          //lower right\n          this.crop_state = 'se-resize';\n        } else if (current_x >= cropbox.x - this.handle_radius && current_x <= cropbox.x + this.handle_radius && current_y > cropbox.y + this.handle_radius && current_y < bottomedge - this.handle_radius) {\n          //left edge\n          this.crop_state = 'w-resize';\n        } else if (current_x >= rightedge - this.handle_radius && current_x <= rightedge + this.handle_radius && current_y > cropbox.y + this.handle_radius && current_y < bottomedge - this.handle_radius) {\n          //right edge\n          this.crop_state = 'e-resize';\n        } else if (current_y >= cropbox.y - this.handle_radius && current_y <= cropbox.y + this.handle_radius && current_x > cropbox.x + this.handle_radius && current_x < rightedge - this.handle_radius) {\n          //top edge\n          this.crop_state = 'n-resize';\n        } else if (current_y >= bottomedge - this.handle_radius && current_y <= bottomedge + this.handle_radius && current_x > cropbox.x + this.handle_radius && current_x < rightedge - this.handle_radius) {\n          //top edge\n          this.crop_state = 's-resize';\n        } else if (current_x > cropbox.x + this.handle_radius && current_x < rightedge - this.handle_radius && current_y > cropbox.y + this.handle_radius && current_y < bottomedge - this.handle_radius) {\n          //inside\n          this.crop_state = 'move';\n        } else {\n          //outside\n          this.crop_state = 'default';\n        }\n        this.canvas.style.cursor = this.crop_state;\n      }\n    }\n  }\n  check_x_bounds(x_pos) {\n    let current = this.current_image;\n    if (current.width <= this.canvas.width) {\n      //image is smaller than canvas\n      if (x_pos < 0) {\n        //leftside\n        x_pos = 0;\n      } else if (x_pos + current.width > this.canvas.width) {\n        //rightside\n        x_pos = this.canvas.width - current.width;\n      }\n    } else {\n      //image is larger than canvas\n      if (x_pos + current.width < this.canvas.width) {\n        x_pos = this.canvas.width - current.width; //leftside\n      } else if (x_pos > 0) {\n        x_pos = 0; //rightside\n      }\n    }\n    return x_pos;\n  }\n  check_y_bounds(y_pos) {\n    let current = this.current_image;\n    if (current.height <= this.canvas.height) {\n      //image is smaller than canvas\n      if (y_pos < 0) {\n        //topside\n        y_pos = 0;\n      } else if (y_pos + current.height > this.canvas.height) {\n        //bottomside\n        y_pos = this.canvas.height - current.height;\n      }\n    } else {\n      //image is larger than canvas\n      if (y_pos + current.height < this.canvas.height) {\n        y_pos = this.canvas.height - current.height; //topside\n      } else if (y_pos > 0) {\n        y_pos = 0; //bottomside\n      }\n    }\n    return y_pos;\n  }\n  zoom_in() {\n    this.scale(2.0);\n  }\n  zoom_out() {\n    this.scale(.5);\n  }\n  scale(scale) {\n    //let scale = (this.zoom+zoom_change)/this.zoom;\n    let current = this.current_image;\n    let center_x = this.canvas.width / 2;\n    let center_y = this.canvas.height / 2;\n    let x_diff = current.x - center_x;\n    let y_diff = current.y - center_y;\n\n    //adjust width\n    current.width = current.width * scale;\n    current.height = current.height * scale;\n\n    //adjust x and y which gets shifted\n    let x_pos = center_x + x_diff * scale;\n    let y_pos = center_y + y_diff * scale;\n    current.x = this.check_x_bounds(x_pos);\n    current.y = this.check_y_bounds(y_pos);\n    console.log(scale, x_diff, y_diff, current.x, current.y);\n    this.ratio = this.width_ratio = this.img.width / current.width;\n    this.height_ratio = this.img.height / current.height;\n    this.zoom = this.zoom * scale;\n    console.log('zoom', this.zoom);\n    this.draw_image();\n    if (this.state == 'crop') {\n      this.draw_cropper();\n    }\n  }\n  draw_cropper() {\n    let ctx = this.ctx;\n    let cropbox = this.cropbox;\n    console.log(cropbox);\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#0095DA88';\n    ctx.fillStyle = '#0095DA88';\n\n    //main rectangle\n    ctx.beginPath();\n    ctx.rect(cropbox.x, cropbox.y, cropbox.width, cropbox.height);\n    let width3rd = cropbox.width * .33;\n    ctx.moveTo(cropbox.x + width3rd, cropbox.y);\n    ctx.lineTo(cropbox.x + width3rd, cropbox.y + cropbox.height);\n    ctx.moveTo(cropbox.x + width3rd * 2, cropbox.y);\n    ctx.lineTo(cropbox.x + width3rd * 2, cropbox.y + cropbox.height);\n    let height3rd = cropbox.height * .33;\n    ctx.moveTo(cropbox.x, cropbox.y + height3rd);\n    ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd);\n    ctx.moveTo(cropbox.x, cropbox.y + height3rd * 2);\n    ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd * 2);\n    ctx.stroke();\n    ctx.closePath();\n\n    //corner circles\n    let positions = [{\n      x: cropbox.x,\n      y: cropbox.y\n    }, {\n      x: cropbox.x + cropbox.width,\n      y: cropbox.y\n    }, {\n      x: cropbox.x,\n      y: cropbox.y + cropbox.height\n    }, {\n      x: cropbox.x + cropbox.width,\n      y: cropbox.y + cropbox.height\n    }];\n    positions.forEach(p => {\n      ctx.beginPath();\n      ctx.arc(p.x, p.y, this.handle_radius, 0, 2 * Math.PI, false);\n      ctx.fill();\n      ctx.closePath();\n    });\n  }\n  hide_rotate_actions() {\n    /* if (this.rotate_actions.style.opacity != 0){\r\n        this.rotate_actions.style.opacity = 0;\r\n        this.rotate_actions.addEventListener('transitionend',()=>{this.rotate_actions.style.display='none';console.log('display none')}, {once:true});\r\n    } */\n  }\n  show_rotate_actions() {\n    /* console.log('display flex');\r\n    this.rotate_actions.style.display = 'flex';\r\n    this.rotate_actions.style.opacity = 1; */\n  }\n  set_rotate_angles(deg) {\n    /* this.rotate_angle = Math.abs(deg);\r\n    let counterclockwise = this.rotate_actions.querySelector('.counter-clockwise');\r\n    let clockwise = this.rotate_actions.querySelector('.clockwise');\r\n      counterclockwise.innerText = '-'+this.rotate_angle;\r\n    clockwise.innerText = '+'+this.rotate_angle; */\n  }\n  rotate_image(deg) {\n    //let deg = e.target.dataset.rotate;\n    let img = this.img;\n    let angle = deg * Math.PI / 180;\n    console.log('angle', angle);\n    let ncanvas = document.createElement('canvas');\n    ncanvas.width = parseInt(Math.abs(img.width * Math.cos(angle)) + Math.abs(img.height * Math.sin(angle))); //img.width;\n    ncanvas.height = parseInt(Math.abs(img.width * Math.sin(angle)) + Math.abs(img.height * Math.cos(angle))); //img.height;\n\n    console.log(ncanvas.width, ncanvas.height);\n    let ctx = ncanvas.getContext('2d');\n    //let wh_ratio = img.width/img.height;\n\n    ctx.translate(ncanvas.width / 2, ncanvas.height / 2);\n    ctx.rotate(angle);\n    ctx.translate(-ncanvas.width / 2, -ncanvas.height / 2);\n    ctx.drawImage(img, 0, 0, img.width, img.height, (ncanvas.width - img.width) / 2, -(ncanvas.width - img.width) / 2, img.width, img.height);\n    console.log((ncanvas.width - img.width) / 2, -(ncanvas.width - img.width) / 2, img.width, img.height);\n    let img_url = ncanvas.toDataURL(\"image/png\");\n    this.img.src = img_url;\n  }\n  open_editor() {\n    /* console.log('open_editor');\r\n    this.dialog.showModal(); */\n  }\n  save_image() {\n    /* //create new canvas\r\n    let ncanvas = document.createElement('canvas');\r\n    let crop = this.crop;\r\n    ncanvas.width = crop.width;\r\n    ncanvas.height = crop.height;\r\n    let ctx = ncanvas.getContext('2d');\r\n    ctx.drawImage(this.img, crop.x, crop.y, crop.width, crop.height, 0, 0, ncanvas.width, ncanvas.height);\r\n    let img_url = ncanvas.toDataURL(\"image/png\");\r\n    this.wire_image.src = img_url;\r\n    this.wire_image.style.display = 'block';\r\n    this.image_selector.style.display = 'none';\r\n    this.edit_image_button.disabled = false;\r\n    this.filename_field.value = img_url;\r\n    this.dialog.close(); */\n  }\n  clear_changes() {\n    /* console.log('clear_changes');\r\n      this.img.src = '';\r\n      this.current_image = {\r\n        x:null, y:null,\r\n        width:null, height:null,\r\n        start_x:null, start_y:null\r\n    };\r\n      this.dialog.close(); */\n  }\n  initiate_edit_image(e) {\n    /* let filename = document.querySelector('#wire-imageFilename').value;\r\n    let file;\r\n    console.log('INITIATE EDIT IMAGE', filename, this.image_data);\r\n    if (filename){\r\n        if (!this.image_data || this.image_data==location.href){\r\n            console.log('load_s3_file');\r\n            file = e.target.dataset.path + filename;\r\n            this.load_s3_file(file);\r\n        }else{\r\n            console.log('open_editor');\r\n            this.open_editor();\r\n        }\r\n      } */\n  }\n  invalid_file() {\n    this.message_callback('Only JPEGs, PNGs, GIFs, BMPs, or WebP allowed');\n  }\n\n  /* get dialog(){return document.querySelector('#image-editor')}\r\n  get toolbar(){return this.dialog.querySelector('.toolbar')}\r\n  get action_group(){return this.dialog.querySelector('.actions')}\r\n  get zoom_in_button(){return this.dialog.querySelector('.zoom-in')}\r\n  get zoom_out_button(){return this.dialog.querySelector('.zoom-out')}\r\n  get rotate_actions(){return this.dialog.querySelector('.rotate-actions')}\r\n  get file_input(){return document.querySelector('#image-file')}\r\n  get save_button(){return this.dialog.querySelector('.buttons .save')}\r\n  get cancel_button(){return this.dialog.querySelector('.buttons .cancel')}\r\n  get trash_button(){return this.dialog.querySelector('.trash')} */\n  get cropbox() {\n    let current = this.current_image;\n    return {\n      x: current.x + this.crop.x * this.zoom,\n      y: current.y + this.crop.y * this.zoom,\n      width: this.crop.width * this.zoom,\n      height: this.crop.height * this.zoom\n    };\n  }\n  /* get image_data(){return this.img.src}\r\n  get wire_image(){return document.querySelector('#wire-image-preview')}\r\n  get edit_image_button(){return document.querySelector('#edit-image')}\r\n  get filename_field(){return document.querySelector('#wire-imageFilename')}\r\n  get image_selector(){return document.querySelector('#image-selector')}\r\n  get edit_image_button(){return document.querySelector('#edit-image')}\r\n  get image_select(){return document.querySelector('#image-selector')} */\n}","map":{"version":3,"names":["ImageEditor","constructor","canvas","message_callback","min_dimension","max_dimension","rotate_angle","image_types","mouse_engaged","crop","x","y","width","height","start_x","start_y","handle_radius","current_image","console","log","ctx","getContext","img","Image","crossOrigin","addEventListener","mouse_down","bind","window","mouse_up","mouse_move","zoom","offsetParent","removeAttribute","load_image","src","keep_crop","devicePixelRatio","offsetWidth","offsetHeight","cwidth","cheight","iwidth","iheight","is_wide","Error","adjusted_ratio","width_ratio","height_ratio","ratio","current","state","set_view_mode","set_state","ex","message","draw_image","clearRect","drawImage","states","forEach","s","classList","add","remove","set_crop_mode","set_rotate_mode","style","cursor","draw_cropper","e","offsetX","offsetY","cropbox","crop_state","current_x","current_y","change_x","change_y","x_pos","y_pos","check_x_bounds","check_y_bounds","crop_width","crop_height","cropright","cropbottom","left_resize","right_resize","top_resize","minheight","bottom_resize","rightedge","bottomedge","zoom_in","scale","zoom_out","center_x","center_y","x_diff","y_diff","lineWidth","strokeStyle","fillStyle","beginPath","rect","width3rd","moveTo","lineTo","height3rd","stroke","closePath","positions","p","arc","Math","PI","fill","hide_rotate_actions","show_rotate_actions","set_rotate_angles","deg","rotate_image","angle","ncanvas","document","createElement","parseInt","abs","cos","sin","translate","rotate","img_url","toDataURL","open_editor","save_image","clear_changes","initiate_edit_image","invalid_file"],"sources":["C:/Users/Jason/projects/project_showcase/image_editor/src/ImageEditor.js"],"sourcesContent":["/* import axios from \"axios\";\r\nimport {} from \"./validation\"; */\r\nexport default class ImageEditor{\r\n    canvas; //the canvas object\r\n    ctx; //2nd context of the canvas\r\n    img; //the image being modified\r\n\r\n    adjusted_ratio; //non-zoom ratio of the image based on sizing to meet the max dimension\r\n    ratio; //the zoom ratio of the image\r\n    width_ratio; //the zoom ratio of the image based on width\r\n    height_ratio; //the zoom ratio of the image based on height\r\n    zoom; //zoom level\r\n\r\n    min_dimension = 64; //minimum dimension of the image, for cropping and what's permitted\r\n    max_dimension = 1920; //maximum dimension of the image, which will resize if too big\r\n    edit_state;\r\n    rotate_angle = 90;\r\n\r\n    message_callback;\r\n\r\n    image_types = ['image/jpeg','image/png','image/webp','image/gif','image/bmp']; //acceptable mimetypes for images\r\n\r\n    //mouse stuff\r\n    start_x; //x coordinates when first clicked\r\n    start_y; //y coordinates when first clicked\r\n    mouse_engaged = false; //is the moouse down\r\n\r\n    //cropping stuff\r\n    crop = {x:null, y:null, width:null, height:null, start_x:null, start_y:null}; //info on the crop\r\n    crop_state;\r\n    handle_radius = 4; //distance from the crop handles\r\n    current_image = {\r\n        x:null, y:null,\r\n        width:null, height:null,\r\n        start_x:null, start_y:null\r\n    }; //presented on canvas image info\r\n\r\n    constructor(canvas, message_callback){\r\n        //possible max width 2056\r\n        console.log('ImageEditor constructor!');\r\n\r\n        this.canvas = canvas;\r\n        console.log(canvas);\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.img = new Image();\r\n        this.img.crossOrigin = 'Anonymous';\r\n\r\n        this.message_callback = message_callback;\r\n\r\n        //init state\r\n        /* this.action_group.querySelectorAll('.view, .crop, .rotate').forEach(b=>b.addEventListener('click', e=>this.set_state(e.target.dataset.state))); */\r\n\r\n        //mouse actions on canvas\r\n        this.canvas.addEventListener('mousedown',this.mouse_down.bind(this));\r\n        window.addEventListener('mouseup',this.mouse_up.bind(this));\r\n        this.canvas.addEventListener('mousemove',this.mouse_move.bind(this));\r\n\r\n        //zoom buttons\r\n        this.zoom = 1.0;\r\n        /*\r\n        //rotate buttons\r\n        this.rotate_actions.querySelectorAll('.counter-clockwise, .clockwise').forEach(b=>{\r\n            b.addEventListener('click', e=>{\r\n                let deg = e.target.dataset.rotate * this.rotate_angle;\r\n                this.rotate_image(deg);\r\n            });\r\n        });\r\n\r\n\r\n        //replace image\r\n        this.file_input.nextElementSibling.addEventListener('click', ()=>{\r\n            //clears file_input for Chrome\r\n            console.log('file_input clear');\r\n            this.file_input.value=null;\r\n        });\r\n        this.file_input.addEventListener('change', this.replace_image.bind(this));\r\n        //save image\r\n        this.save_button.addEventListener('click', this.save_image.bind(this));\r\n         */\r\n\r\n        window.addEventListener('resize', ()=>{\r\n            if (this.canvas.offsetParent !== null){\r\n                this.canvas.removeAttribute('width');\r\n                this.canvas.removeAttribute('height');\r\n                this.load_image(this.img.src, true);\r\n            }\r\n        });\r\n\r\n        console.log(this.canvas.width, this.canvas.height);\r\n    }\r\n    load_image(src, keep_crop){\r\n        this.img.src = src;\r\n        console.log(src);\r\n        console.log('load_image');\r\n        console.log(devicePixelRatio);\r\n\r\n        try{\r\n            this.canvas.width = this.canvas.offsetWidth;\r\n            this.canvas.height = this.canvas.offsetHeight;\r\n\r\n            let cwidth = this.canvas.width;\r\n            let cheight = this.canvas.height;\r\n\r\n            let iwidth = this.img.width;\r\n            let iheight = this.img.height;\r\n\r\n            let is_wide = iwidth > iheight;\r\n            console.log('is_wide', is_wide);\r\n            if (iwidth < this.min_dimension || iheight < this.min_dimension){\r\n                throw new Error(\"Image doesn't meet minimum size\");\r\n            }\r\n            /* if (!is_wide && iwidth < this.minwidth){ //rotate automatically\r\n                this.rotate_image(90);\r\n                iwidth = this.img.width;\r\n                iheight = this.img.height;\r\n                is_wide = iwidth > iheight;\r\n            } */\r\n\r\n            console.log(iwidth, iheight);\r\n\r\n            /* if (iheight < this.minwidth){\r\n                this.set_rotate_angles(180);\r\n            }else{\r\n                this.set_rotate_angles(90);\r\n            } */\r\n            console.log('keep_crop', keep_crop);\r\n            if (!keep_crop){\r\n                this.crop = {\r\n                    /* x:0, y:is_wide ? 0 : iheight/2 - iwidth/2,\r\n                    width:iwidth, height:is_wide ? iheight : iwidth, */\r\n                    x:0, y:0,\r\n                    width:iwidth, height:iheight,\r\n                    start_x:null, start_y:null\r\n                };\r\n            }\r\n            if (iwidth > this.max_dimension && !is_wide){\r\n                console.log('reduce width');\r\n                this.adjusted_ratio = this.max_dimension/ iwidth;\r\n            }else if (iheight > this.max_dimension){\r\n                console.log('reduce height');\r\n                this.adjusted_ratio = this.max_dimension  / iheight;\r\n            }else{\r\n                this.adjusted_ratio = 1.0;\r\n            }\r\n\r\n            this.width_ratio = (iwidth * this.adjusted_ratio) / cwidth;\r\n            this.height_ratio = (iheight * this.adjusted_ratio) / cheight;\r\n\r\n            console.log('cwidth', cwidth, 'cheight', cheight, 'adjusted_ratio', this.adjusted_ratio,\r\n            'width_ratio', this.width_ratio, 'height_ratio', this.height_ratio,\r\n            'iwidth/width_ratio', iwidth/this.width_ratio, 'iheight/width_ratio',iheight/this.width_ratio,\r\n            'iwidth/height_ratio', iwidth/this.height_ratio, 'iheight/height_ratio', iheight/this.height_ratio);\r\n            //fill height or fill width\r\n            if (iwidth > cwidth || iheight > cheight){\r\n                if (iwidth/this.height_ratio > cwidth){//fit wide because the height is larger than the canvas\r\n                    this.ratio = this.width_ratio;\r\n                }else{//fit high\r\n                    this.ratio = this.height_ratio;\r\n                }\r\n\r\n                this.zoom = 1/this.ratio;\r\n            }else{\r\n                this.zoom = 1.0;\r\n\r\n                this.ratio = this.width_ratio;\r\n            }\r\n            console.log(this.width_ratio, this.height_ratio, this.ratio);\r\n            console.log('zoom', this.zoom);\r\n            console.log('crop', this.crop);\r\n\r\n            let current = this.current_image;\r\n            current.width = iwidth * this.adjusted_ratio * this.zoom;\r\n            current.height = iheight * this.adjusted_ratio * this.zoom;\r\n\r\n            current.x = (cwidth - current.width)/2;\r\n            current.y = (cheight - current.height)/2;\r\n\r\n            console.log(current);\r\n            if (!this.state){\r\n                this.state = 'view';\r\n                this.set_view_mode();\r\n            }\r\n            this.set_state(this.state);\r\n        }catch(ex){\r\n            this.message_callback(ex.message);\r\n        }\r\n\r\n    }\r\n    draw_image(){\r\n        console.log('draw_image');\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); //clear image\r\n\r\n        let current;\r\n        let src = {};\r\n        if (this.state==='view'){\r\n            src = (({x,y,width,height})=>({x,y,width,height}))(this.crop);\r\n            console.log(this.current_image);\r\n            current = {\r\n                x:this.current_image.x+this.crop.x*this.zoom,\r\n                y:this.current_image.y+this.crop.y*this.zoom,\r\n                width:this.crop.width*this.zoom,\r\n                height:this.crop.height*this.zoom\r\n            };\r\n            console.log(current, this.zoom);\r\n        }else{\r\n            src = {x:0,y:0, width:this.img.width, height:this.img.height};\r\n            current = this.current_image;\r\n        }\r\n        console.log(src.x, src.y, src.width, src.height, //get all of source images\r\n        current.x, current.y,\r\n        current.width, current.height);\r\n        this.ctx.drawImage(this.img,\r\n            src.x, src.y, src.width, src.height, //get all of source images\r\n            current.x, current.y,\r\n            current.width, current.height);\r\n    }\r\n    set_state(state){\r\n        console.log(state);\r\n        /* this.action_group.querySelectorAll('button').forEach(b=>b.classList.remove('selected'));\r\n        this.action_group.querySelector(`.${state}`).classList.add('selected'); */\r\n        this.state = state;\r\n        let states = ['view','crop','rotate'];\r\n        states.forEach(s=>{\r\n            if (s===state) this.canvas.classList.add(s);\r\n            else this.canvas.classList.remove(s);\r\n        });\r\n\r\n        if(state==='view'){\r\n            this.set_view_mode();\r\n        }else if (state==='crop'){\r\n            this.set_crop_mode();\r\n        }else if (state==='rotate'){\r\n            this.set_rotate_mode();\r\n        }\r\n    }\r\n    set_view_mode(){\r\n        this.canvas.style.cursor = 'move';\r\n        //this.hide_rotate_actions();\r\n        this.draw_image();\r\n    }\r\n    set_crop_mode(){\r\n        this.canvas.style.cursor = 'default';\r\n        //this.hide_rotate_actions();\r\n        this.draw_image();\r\n        this.draw_cropper();\r\n    }\r\n    set_rotate_mode(){\r\n        /* this.show_rotate_actions();\r\n        this.canvas.style.cursor = 'default';\r\n        this.draw_image(); */\r\n    }\r\n    mouse_down(e){\r\n        this.mouse_engaged  = true;\r\n        this.start_x = e.offsetX;\r\n        this.start_y = e.offsetY;\r\n        if (this.state==='view'){\r\n            console.log(this.current);\r\n            this.current_image.start_x = this.current_image.x;\r\n            this.current_image.start_y = this.current_image.y;\r\n        }else if (this.state==='crop'){\r\n            this.crop.start_x = this.cropbox.x;\r\n            this.crop.start_y = this.cropbox.y;\r\n            if (this.crop_state==='default'){\r\n                this.current_image.start_x = this.current_image.x;\r\n                this.current_image.start_y = this.current_image.y;\r\n            }\r\n            console.log(this.crop);\r\n        }\r\n    }\r\n    mouse_up(){\r\n        this.mouse_engaged = false;\r\n    }\r\n    mouse_move(e){\r\n        let current_x = e.offsetX;\r\n        let current_y = e.offsetY;\r\n        let change_x = current_x - this.start_x;\r\n        let change_y = current_y - this.start_y;\r\n        let current = this.current_image;\r\n        if (this.mouse_engaged){\r\n            console.log(change_x, change_y);\r\n\r\n            if(this.state==='view'){ //move image\r\n                //bounds check\r\n                let x_pos = current.start_x+change_x;\r\n                let y_pos = current.start_y+change_y;\r\n\r\n                current.x = this.check_x_bounds(x_pos);\r\n                current.y = this.check_y_bounds(y_pos);\r\n                this.draw_image();\r\n            }else if (this.state==='crop'){\r\n                let x_pos = this.cropbox.x, y_pos = this.cropbox.y;\r\n                let crop_width = this.cropbox.width;\r\n                let crop_height = this.cropbox.height;\r\n                console.log(this.cropbox);\r\n                let cropright = this.cropbox.x+this.cropbox.width;\r\n                let cropbottom = this.cropbox.y+this.cropbox.height;\r\n\r\n                let left_resize = ()=>{\r\n                    if (current_x < current.x) x_pos=current.x; //don't grow beyond left edge\r\n                    else if (current_x > cropright - this.min_dimension/this.ratio) x_pos=cropright-this.min_dimension/this.ratio; //don't shrink smaller than minimum\r\n                    else if (current_x > cropright-crop_height) x_pos=cropright-crop_height; //don't shrink width more than height\r\n                    else x_pos = current_x;\r\n\r\n                    crop_width = cropright - x_pos;\r\n                };\r\n                let right_resize = ()=>{\r\n                    if (current_x < current.x+current.width  //don't grow beyond the right edge\r\n                    && current_x > this.cropbox.x + this.min_dimension/this.ratio //don't shrink smaller than the minimum\r\n                    && current_x > current.x+crop_height) //don't shrink beyond width more than height\r\n                        crop_width = current_x - this.cropbox.x;\r\n                };\r\n                let top_resize = ()=>{\r\n                    if (current_y < current.y) y_pos=current.y; //don't grow beyond the top edge\r\n                    else if (current_y > cropbottom - this.minheight/this.ratio) y_pos=cropbottom-this.minheight/this.ratio; //don't shrink smaller than minimum\r\n                    else if (current_y < cropbottom-crop_width) y_pos=cropbottom-crop_width; //don't grow beyond width\r\n                    else y_pos = current_y;\r\n\r\n                    crop_height = cropbottom - y_pos;\r\n                }\r\n                let bottom_resize = ()=>{\r\n                    if (current_y < current.y+current.height //don't grow beyond the bottom edge\r\n                    && current_y > this.cropbox.y + this.minheight/this.ratio //don't shrink smaller than the minimum\r\n                    && current_y < this.cropbox.y+crop_width) //don't grow beyond the width\r\n                        crop_height = current_y - this.cropbox.y;\r\n                }\r\n                switch(this.crop_state){\r\n                    case 'nw-resize':\r\n                        top_resize();\r\n                        left_resize();\r\n                        break;\r\n                    case 'ne-resize':\r\n                        top_resize();\r\n                        right_resize();\r\n                        break;\r\n                    case 'sw-resize':\r\n                        bottom_resize();\r\n                        left_resize();\r\n                        break;\r\n                    case 'se-resize':\r\n                        bottom_resize();\r\n                        right_resize();\r\n                        break;\r\n                    case 'w-resize':\r\n                        left_resize();\r\n                        break;\r\n                    case 'e-resize':\r\n                        right_resize();\r\n                        break;\r\n                    case 'n-resize':\r\n                        top_resize();\r\n                        break;\r\n                    case 's-resize':\r\n                        bottom_resize();\r\n                        break;\r\n                    case 'move':\r\n                        x_pos = this.crop.start_x+change_x;\r\n                        y_pos = this.crop.start_y+change_y;\r\n\r\n                        if (x_pos < current.x){ //leftside\r\n                            x_pos = current.x;\r\n                        }else if (x_pos + crop_width > current.x + current.width){//rightside\r\n                            x_pos = current.x + current.width - crop_width;\r\n                        }\r\n                        if (y_pos < current.y){ //topside\r\n                            y_pos = current.y;\r\n                        }else if (y_pos + crop_height > current.y + current.height){//bottomside\r\n                            y_pos = current.y + current.height - crop_height;\r\n                        }\r\n                        break;\r\n                    default:\r\n\r\n                        current.x = this.check_x_bounds(current.start_x+change_x);\r\n                        current.y = this.check_y_bounds(current.start_y+change_y);\r\n                        x_pos = current.x + this.crop.x*this.zoom;\r\n                        y_pos = current.y + this.crop.y*this.zoom;\r\n                }\r\n\r\n                //console.log(this.crop_state, x_pos, current.x, cropright);\r\n                //cropbox.x = current.x  + this.crop.x*this.zoom,\r\n                //cropbox.x - current.x = this.crop.x*this.zoom\r\n                //(cropbox.x - current.x) / this.zoom = this.crop.x\r\n                this.crop.x = (x_pos - current.x)/this.zoom;\r\n                this.crop.y = (y_pos - current.y)/this.zoom;\r\n                this.crop.width = crop_width/this.zoom;\r\n                this.crop.height = crop_height/this.zoom;\r\n                console.log(this.crop);\r\n                this.draw_image();\r\n                this.draw_cropper();\r\n            }\r\n        }else{\r\n            let cropbox = this.cropbox;\r\n            let rightedge = cropbox.x + cropbox.width;\r\n            let bottomedge = cropbox.y + cropbox.height;\r\n            if (this.state=='crop'){\r\n                if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n                current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius){ //upper left\r\n                    this.crop_state = 'nw-resize';\r\n                }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n                current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius){ //upper right\r\n                    this.crop_state = 'ne-resize';\r\n                }else if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n                current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius){ //lower left\r\n                    this.crop_state = 'sw-resize';\r\n                }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n                current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius){ //lower right\r\n                    this.crop_state = 'se-resize';\r\n                }else if (current_x >= cropbox.x-this.handle_radius && current_x <= cropbox.x+this.handle_radius &&\r\n                current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //left edge\r\n                    this.crop_state = 'w-resize';\r\n                }else if (current_x >= rightedge-this.handle_radius && current_x <= rightedge+this.handle_radius &&\r\n                current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //right edge\r\n                    this.crop_state = 'e-resize';\r\n                }else if (current_y >= cropbox.y-this.handle_radius && current_y <= cropbox.y+this.handle_radius &&\r\n                current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius){ //top edge\r\n                    this.crop_state = 'n-resize';\r\n                }else if (current_y >= bottomedge-this.handle_radius && current_y <= bottomedge+this.handle_radius &&\r\n                current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius){ //top edge\r\n                    this.crop_state = 's-resize';\r\n                }else if (current_x > cropbox.x+this.handle_radius && current_x < rightedge-this.handle_radius &&\r\n                current_y > cropbox.y+this.handle_radius && current_y < bottomedge-this.handle_radius){ //inside\r\n                    this.crop_state = 'move';\r\n                } else{ //outside\r\n                    this.crop_state = 'default';\r\n                }\r\n                this.canvas.style.cursor = this.crop_state;\r\n\r\n            }\r\n        }\r\n    }\r\n    check_x_bounds(x_pos){\r\n        let current = this.current_image;\r\n        if (current.width <= this.canvas.width){ //image is smaller than canvas\r\n            if (x_pos < 0){ //leftside\r\n                x_pos = 0;\r\n            }else if (x_pos + current.width > this.canvas.width){//rightside\r\n                x_pos = this.canvas.width - current.width;\r\n            }\r\n        }else{ //image is larger than canvas\r\n            if (x_pos + current.width < this.canvas.width){\r\n                x_pos = this.canvas.width - current.width; //leftside\r\n            }else if (x_pos > 0){\r\n                x_pos = 0; //rightside\r\n            }\r\n        }\r\n        return x_pos;\r\n    }\r\n    check_y_bounds(y_pos){\r\n        let current = this.current_image;\r\n        if (current.height <= this.canvas.height){ //image is smaller than canvas\r\n            if (y_pos < 0){ //topside\r\n                y_pos = 0;\r\n            }else if (y_pos + current.height > this.canvas.height){//bottomside\r\n                y_pos = this.canvas.height - current.height;\r\n            }\r\n        }else{ //image is larger than canvas\r\n            if (y_pos + current.height < this.canvas.height){\r\n                y_pos = this.canvas.height - current.height; //topside\r\n            }else if (y_pos > 0){\r\n                y_pos = 0; //bottomside\r\n            }\r\n        }\r\n        return y_pos;\r\n    }\r\n    zoom_in(){\r\n        this.scale(2.0);\r\n    }\r\n    zoom_out(){\r\n        this.scale(.5);\r\n    }\r\n    scale(scale){\r\n        //let scale = (this.zoom+zoom_change)/this.zoom;\r\n        let current = this.current_image;\r\n        let center_x = this.canvas.width / 2;\r\n        let center_y = this.canvas.height / 2;\r\n\r\n        let x_diff = current.x - center_x;\r\n        let y_diff = current.y - center_y;\r\n\r\n        //adjust width\r\n        current.width = current.width * scale;\r\n        current.height = current.height * scale;\r\n\r\n        //adjust x and y which gets shifted\r\n        let x_pos = center_x + x_diff * scale;\r\n        let y_pos = center_y + y_diff * scale;\r\n\r\n\r\n        current.x = this.check_x_bounds(x_pos);\r\n        current.y = this.check_y_bounds(y_pos);\r\n        console.log(scale, x_diff, y_diff, current.x, current.y);\r\n        this.ratio = this.width_ratio = this.img.width / current.width;\r\n        this.height_ratio = this.img.height / current.height;\r\n\r\n        this.zoom = this.zoom*scale;\r\n        console.log('zoom', this.zoom);\r\n        this.draw_image();\r\n        if (this.state=='crop'){\r\n            this.draw_cropper();\r\n        }\r\n    }\r\n    draw_cropper(){\r\n        let ctx = this.ctx;\r\n        let cropbox = this.cropbox;\r\n\r\n        console.log(cropbox);\r\n\r\n\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = '#0095DA88';\r\n        ctx.fillStyle = '#0095DA88';\r\n\r\n\r\n        //main rectangle\r\n        ctx.beginPath();\r\n        ctx.rect(cropbox.x, cropbox.y, cropbox.width, cropbox.height);\r\n        let width3rd = cropbox.width*.33;\r\n        ctx.moveTo(cropbox.x + width3rd, cropbox.y);\r\n        ctx.lineTo(cropbox.x + width3rd, cropbox.y+cropbox.height);\r\n        ctx.moveTo(cropbox.x + width3rd*2, cropbox.y);\r\n        ctx.lineTo(cropbox.x + width3rd*2, cropbox.y+cropbox.height);\r\n        let height3rd = cropbox.height*.33;\r\n        ctx.moveTo(cropbox.x, cropbox.y + height3rd);\r\n        ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd);\r\n        ctx.moveTo(cropbox.x, cropbox.y + height3rd*2);\r\n        ctx.lineTo(cropbox.x + cropbox.width, cropbox.y + height3rd*2);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        //corner circles\r\n        let positions = [{x:cropbox.x, y:cropbox.y},{x:cropbox.x+cropbox.width, y:cropbox.y},\r\n            {x:cropbox.x, y:cropbox.y+cropbox.height},{x:cropbox.x+cropbox.width, y:cropbox.y+cropbox.height}];\r\n        positions.forEach(p=>{\r\n            ctx.beginPath();\r\n            ctx.arc(p.x, p.y, this.handle_radius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n        });\r\n    }\r\n    hide_rotate_actions(){\r\n        /* if (this.rotate_actions.style.opacity != 0){\r\n            this.rotate_actions.style.opacity = 0;\r\n            this.rotate_actions.addEventListener('transitionend',()=>{this.rotate_actions.style.display='none';console.log('display none')}, {once:true});\r\n        } */\r\n    }\r\n    show_rotate_actions(){\r\n        /* console.log('display flex');\r\n        this.rotate_actions.style.display = 'flex';\r\n        this.rotate_actions.style.opacity = 1; */\r\n    }\r\n    set_rotate_angles(deg){\r\n        /* this.rotate_angle = Math.abs(deg);\r\n        let counterclockwise = this.rotate_actions.querySelector('.counter-clockwise');\r\n        let clockwise = this.rotate_actions.querySelector('.clockwise');\r\n\r\n        counterclockwise.innerText = '-'+this.rotate_angle;\r\n        clockwise.innerText = '+'+this.rotate_angle; */\r\n    }\r\n    rotate_image(deg){\r\n        //let deg = e.target.dataset.rotate;\r\n        let img = this.img;\r\n        let angle = deg*Math.PI/180;\r\n        console.log('angle',angle);\r\n\r\n\r\n        let ncanvas = document.createElement('canvas');\r\n\r\n        ncanvas.width = parseInt(Math.abs(img.width * Math.cos(angle)) + Math.abs(img.height * Math.sin(angle))); //img.width;\r\n        ncanvas.height = parseInt(Math.abs(img.width * Math.sin(angle)) + Math.abs(img.height * Math.cos(angle))); //img.height;\r\n\r\n        console.log(ncanvas.width, ncanvas.height);\r\n\r\n        let ctx = ncanvas.getContext('2d');\r\n        //let wh_ratio = img.width/img.height;\r\n\r\n        ctx.translate(ncanvas.width/2, ncanvas.height/2);\r\n        ctx.rotate(angle);\r\n        ctx.translate(-ncanvas.width/2, -ncanvas.height/2);\r\n        ctx.drawImage(img, 0,0,\r\n            img.width,img.height,\r\n            (ncanvas.width-img.width)/2, -(ncanvas.width-img.width)/2,\r\n            img.width, img.height);\r\n        console.log((ncanvas.width-img.width)/2, -(ncanvas.width-img.width)/2,\r\n        img.width, img.height);\r\n        let img_url = ncanvas.toDataURL(\"image/png\");\r\n        this.img.src = img_url;\r\n    }\r\n\r\n    open_editor(){\r\n        /* console.log('open_editor');\r\n        this.dialog.showModal(); */\r\n    }\r\n\r\n    save_image(){\r\n        /* //create new canvas\r\n        let ncanvas = document.createElement('canvas');\r\n        let crop = this.crop;\r\n        ncanvas.width = crop.width;\r\n        ncanvas.height = crop.height;\r\n        let ctx = ncanvas.getContext('2d');\r\n        ctx.drawImage(this.img, crop.x, crop.y, crop.width, crop.height, 0, 0, ncanvas.width, ncanvas.height);\r\n        let img_url = ncanvas.toDataURL(\"image/png\");\r\n        this.wire_image.src = img_url;\r\n        this.wire_image.style.display = 'block';\r\n        this.image_selector.style.display = 'none';\r\n        this.edit_image_button.disabled = false;\r\n        this.filename_field.value = img_url;\r\n        this.dialog.close(); */\r\n    }\r\n    clear_changes(){\r\n        /* console.log('clear_changes');\r\n\r\n        this.img.src = '';\r\n\r\n        this.current_image = {\r\n            x:null, y:null,\r\n            width:null, height:null,\r\n            start_x:null, start_y:null\r\n        };\r\n\r\n        this.dialog.close(); */\r\n    }\r\n    initiate_edit_image(e){\r\n        /* let filename = document.querySelector('#wire-imageFilename').value;\r\n        let file;\r\n        console.log('INITIATE EDIT IMAGE', filename, this.image_data);\r\n        if (filename){\r\n            if (!this.image_data || this.image_data==location.href){\r\n                console.log('load_s3_file');\r\n                file = e.target.dataset.path + filename;\r\n                this.load_s3_file(file);\r\n            }else{\r\n                console.log('open_editor');\r\n                this.open_editor();\r\n            }\r\n\r\n        } */\r\n    }\r\n\r\n    invalid_file(){\r\n        this.message_callback('Only JPEGs, PNGs, GIFs, BMPs, or WebP allowed');\r\n    }\r\n\r\n    /* get dialog(){return document.querySelector('#image-editor')}\r\n    get toolbar(){return this.dialog.querySelector('.toolbar')}\r\n    get action_group(){return this.dialog.querySelector('.actions')}\r\n    get zoom_in_button(){return this.dialog.querySelector('.zoom-in')}\r\n    get zoom_out_button(){return this.dialog.querySelector('.zoom-out')}\r\n    get rotate_actions(){return this.dialog.querySelector('.rotate-actions')}\r\n    get file_input(){return document.querySelector('#image-file')}\r\n    get save_button(){return this.dialog.querySelector('.buttons .save')}\r\n    get cancel_button(){return this.dialog.querySelector('.buttons .cancel')}\r\n    get trash_button(){return this.dialog.querySelector('.trash')} */\r\n    get cropbox(){\r\n        let current = this.current_image;\r\n        return {\r\n            x: current.x + this.crop.x*this.zoom,\r\n            y: current.y + this.crop.y*this.zoom,\r\n            width: this.crop.width*this.zoom,\r\n            height: this.crop.height*this.zoom\r\n        };\r\n    }\r\n    /* get image_data(){return this.img.src}\r\n    get wire_image(){return document.querySelector('#wire-image-preview')}\r\n    get edit_image_button(){return document.querySelector('#edit-image')}\r\n    get filename_field(){return document.querySelector('#wire-imageFilename')}\r\n    get image_selector(){return document.querySelector('#image-selector')}\r\n    get edit_image_button(){return document.querySelector('#edit-image')}\r\n    get image_select(){return document.querySelector('#image-selector')} */\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}